; type errors on plus
(+ 1 2)
(+ 1 (+ 1 (+ 1 (+ 1 2))))
(func (f x) (+ x false))
(try {
    (+ 1 false)
    false
  }
  e true)
(try { (f false) false } e true)
(try { (f 1) false } e true)
; arity
(func (two a b) { a b })
(try { (two 1 2 3 4) false } e true)
(try { (two 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) false } e true)
(try { (two 1) false } e true)
(try { (two) false } e true)
(try { (+ (+ (+ (+ 6 false)))) false } e true)
; raise
(try { 1 2 3 (raise "exception!") 4 5 false } e true)
(func (except b) {
    (print b)
    (raise b)
    (false)
})
(try { 1 (except "raise me") false } e true)
; no matching cond    
(try
  (cond
    (false 1)
    ((= false true) 2)
    (() 3)
    ((= 18 14) 4)
    ((if 11 () ()) 5)
    ((print "6") 6))
  e e)

; catch now binds the error to a value
(try
  (1./ 0)
  e e)
(try
  (1.> "string")
  e e)
(try
  unbound
  e e)
(try
  (cond
    (() 2)
    (false 4))
  e e)
(try
  (true.and 3)
  e e)
(try
  (new str)
  e e)
(try
  (new 1)
  e e)
(try {
    (set z (base.superclass))
    (set w (z.superclass))
    (w.superclass)
  }
  e e)
(try {
    (set x (two.params))
    (x.get 0)
    (x.get 1)
    (x.get 2)
  }
  e e)

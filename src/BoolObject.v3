class BoolObject(val: bool) extends Object {
	private new () super(BoolObjects.classBool) {}
	
	def display() -> string { return if(val, "true", "false"); }
	def isTrue()  -> bool   { return val; }
}

component BoolObjects {
	def classBool = ClassObject.new("bool", 
				Objects.classBase, 
				CodeObjects.virgilFail, 
				[], 
				[FuncObjects.fromVirgil("not", [], b_not)]);

	/* canonical instances of bool values */
	def trueObject  = BoolObject.new(true);
	def falseObject = BoolObject.new(false);
}

def b_not(args: Range<Object>) -> (Object, bool) {
	return (if(BoolObject.!(args[0]).val, BoolObjects.falseObject, BoolObjects.trueObject), false);
}


/* Builtins are identifiers which are available at the global level at VM 
 * startup.
 */
enum Builtin(id: string, val: Object) {
	TRUE    ("true",     BoolObjects.trueObject),
	FALSE   ("false",    BoolObjects.falseObject),
 	BASE    ("base",     ClassObjects.classBase),
 	BOOL    ("bool",     ClassObjects.classBool),
 	CLASS   ("class",    ClassObjects.classClass),
	CODE    ("code",     ClassObjects.classCode),
	EXN     ("exn",      ClassObjects.classExn),
 	FRAME   ("frame",    ClassObjects.classFrame),
 	FUNC    ("func",     ClassObjects.classFunc),
 	INT     ("int",      ClassObjects.classInt),
 	LIST    ("list",     ClassObjects.classList),
 	MAP     ("map",      ClassObjects.classMap),
 	METHOD  ("method",   ClassObjects.classMethod),
 	POOPCRAP("poopcrap", ClassObjects.classPoopCrap),
 	STR     ("str",      ClassObjects.classStr),
 	NEW_MAP ("new-map",  FuncObjects.fromVirgil("new-map", [], newMap)),
	PUTS    ("puts",     FuncObjects.fromVirgil("puts", ["o"], puts))
}

/* Virgil function definitions for Cicero function objects */

def newMap(args: Range<Object>) -> Result {
	return Result.OK(MapObject.new());
}

def puts(args: Range<Object>) -> Result {
	def obj = args[0];
	if (!obj.instanceOf(ClassObjects.classStr)) {
		return Result.Exn(ExnObjects.fromVirgil("puts", "type mismatch"));
	} else {
		System.puts(StrObject.!(obj).str);
		return Result.OK(PoopCrapObjects.instance);
	}
}

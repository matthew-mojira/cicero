class Bytecode {
	def bytecode:   DataWriter     = DataWriter.new();
	def strings:    Vector<string> = Vector.new();
	def classholes: Vector<Class>  = Vector.new(); // XXX these are not real classes!
	def constants:  Vector<Object> = Vector.new();

	new(ast: AST) {
		compileAST(ast);
	}

	def compileAST(ast: AST) {
		match (ast.data) {
			Lit(obj) => {
				bytecode.putb(Opcode.LOAD_LIT.tag);
				bytecode.putb(addConstant(obj));
			}
			Id(id) => {
				def idx = strings.length;
				strings.put(id);

				bytecode.putb(Opcode.LOAD_NAME.tag);
				bytecode.putb(idx);
			}
			Apply(tgt, args) => {
				compileAST(tgt);
				bytecode.putb(Opcode.ASSERT_FUNC.tag);
				bytecode.zeroN(1);
				for (arg in args) {
					compileAST(arg);
				}
				bytecode.putb(Opcode.CALL.tag);
				bytecode.putb(args.length);
			}
			If(cond, tru, fals) => {
				compileAST(cond);
				bytecode.putb(Opcode.JUMP_IF_FALSE.tag);
				def hole1 = bytecode.pos;
				bytecode.skipN(1); // hole to put jump offset
				compileAST(tru);
				bytecode.putb(Opcode.JUMP.tag);
				def hole2 = bytecode.pos;
				bytecode.skipN(1); // hole to put jump offset
				bytecode.data[hole1] = byte.view(bytecode.pos - hole1 - 1);
				compileAST(fals);
				bytecode.data[hole2] = byte.view(bytecode.pos - hole2 - 1);
			}
			Cond(cases) => {
				def ends: Vector<int> = Vector.new();
				for (c in cases) {
					def cond = c.0;
					def body = c.1;

					compileAST(cond);
					bytecode.putb(Opcode.JUMP_IF_FALSE.tag);
					def hole = bytecode.pos;
					bytecode.skipN(1); // hole to put jump offset
					compileAST(body);
					bytecode.putb(Opcode.JUMP.tag);
					ends.put(bytecode.pos);
					bytecode.skipN(1); // hole to put jump offset
					bytecode.data[hole] = byte.view(bytecode.pos - hole - 1);
				}
				def idx = constants.length;
				// XXX object creation in AST compilation!
				// could be problematic if we object lookup observable
				constants.put(StrObjects.getStrObject("cond error: no true breanch"));
				bytecode.putb(Opcode.LOAD_LIT.tag);
				bytecode.putb(idx);
				bytecode.putb(Opcode.RAISE.tag);
				bytecode.putb(0); // no operand
				// fill in all jump to end targets
				for (hole in ends.extract()) {
					bytecode.data[hole] = byte.view(bytecode.pos - hole - 1);
				}
			}
			Func(id, params, code) => {
				// XXX compiling code
				code.compile();
				
				def cst = constants.length;
				// XXX object creation in AST compilation!
				constants.put(FuncObjects.newFO(Func.new(id, params, code)));
			
				def str = strings.length;
				strings.put(id);

				bytecode.putb(Opcode.LOAD_LIT.tag);
				bytecode.putb(cst);
				bytecode.putb(Opcode.STORE_NAME.tag);
				bytecode.putb(str);
				bytecode.putb(Opcode.LOAD_NAME.tag);
				bytecode.putb(str);
			}
			Assign(id, code) => {
				def str = strings.length;
				strings.put(id);

				compileAST(code);
				bytecode.putb(Opcode.STORE_NAME.tag);
				bytecode.putb(str);
				bytecode.putb(Opcode.LOAD_NAME.tag);
				bytecode.putb(str);
			}
			Raise(exn) => {
				compileAST(exn);
				bytecode.putb(Opcode.RAISE.tag);
				bytecode.putb(0); // no operand
			}
			Catch(try, id, catch) => {
				bytecode.putb(Opcode.TRY.tag);
				def hole1 = bytecode.pos;
				bytecode.skipN(1);
				compileAST(try);
				bytecode.putb(Opcode.CATCH.tag);
				bytecode.putb(0); // no operand
				bytecode.putb(Opcode.JUMP.tag);
				def hole2 = bytecode.pos;
				bytecode.skipN(1);
				bytecode.data[hole1] = byte.view(bytecode.pos - hole1 - 1);

				def idx = strings.length;
				strings.put(id);
				bytecode.putb(Opcode.STORE_NAME.tag);
				bytecode.putb(idx);

				compileAST(catch);
				bytecode.data[hole2] = byte.view(bytecode.pos - hole2 - 1);
			}
			Begin(exprs) => {
				for (i < exprs.length - 1) {
					compileAST(exprs[i]);
					bytecode.putb(Opcode.PULL.tag);
					bytecode.putb(200 + i);
				}
				compileAST(exprs[exprs.length - 1]);
			}
			While(cond, body) => {
				def pos = bytecode.pos;
				compileAST(cond);
				bytecode.putb(Opcode.JUMP_IF_FALSE_PEEK.tag);
				def hole = bytecode.pos;
				bytecode.skipN(1); // hole to put jump offset
				compileAST(body);
				bytecode.putb(Opcode.PULL.tag);
				bytecode.putb(100);
				bytecode.putb(Opcode.JUMP.tag);
				bytecode.skipN(1);
				bytecode.data[bytecode.pos - 1] = byte.view(pos - bytecode.pos);
				bytecode.data[hole] = byte.view(bytecode.pos - hole - 1);
			}
			GetField(id, obj) => {
				compileAST(obj);
				def idx = strings.length;
				strings.put(id);
				bytecode.putb(Opcode.GET_FIELD.tag);
				bytecode.putb(idx);
			}
			SetField(id, obj, val) => {
				compileAST(obj);
				compileAST(val);
				def idx = strings.length;
				strings.put(id);
				bytecode.putb(Opcode.SET_FIELD.tag);
				bytecode.putb(idx);
			}
			Class(id, superclass, init, fields, methods) => {
				// there are subcodes which are getting compiled here
				// TODO should this compilation process just be part of code creation?
				match (superclass) {
					Nothing => {
						def idx = constants.length;
						constants.put(ClassObject.new(Objects.classBase));
						bytecode.putb(Opcode.LOAD_LIT.tag);
						bytecode.putb(idx);
					}
					Just(expr) => compileAST(expr);
				}
				var init2: Code;
				match (init) {
					Nothing => ;
					Just(code) => {
						code.compile();
						init2 = code;
					}
				}
				def idx = classholes.length;
				//                            XXX
				classholes.put(Class.new(id, null, init2, fields, Arrays.map(methods, funcToFunc)));
				bytecode.putb(Opcode.CREATE_CLASS.tag);
				bytecode.putb(idx);
				def str = strings.length;
				strings.put(id);
				bytecode.putb(Opcode.STORE_NAME.tag);
				bytecode.putb(str);
				bytecode.putb(Opcode.LOAD_NAME.tag);
				bytecode.putb(str);
			}
			New(obj) => {
				compileAST(obj);
				bytecode.putb(Opcode.NEW.tag);
				bytecode.putb(0); // no operand
			}

//			_ => System.error("compile error", "unsupported AST node");
		}
		
	}

	// wrappers around datawriter
	def putb(b: byte) { bytecode.putb(b); }
	def skipN(s: int) { bytecode.skipN(s); }
	def pos() -> int { return bytecode.pos; }
	def writeb(addr: int, data: byte) { bytecode.data[addr] = data; }

	def addString(str: string) -> int {
		def idx = strings.length;
		strings.put(str);
		return idx;
	}

	def addClasshole(clazz: Class) -> int {
		def idx = classholes.length;
		classholes.put(clazz);
		return idx;
	}

	def addConstant(const: Object) -> int {
		def idx = constants.length;
		constants.put(const);
		return idx;
	}

	/* print this bytecode */
	def inspect() {
		def bc = bytecode.copy();
		var pc = 0;
		while (pc < bc.length) {
			def bc      = Ref<Instruction>.at(bc, pc);
			def opcode  = bc.opcode;
			def operand = bc.operand;

			System.puts(Strings.format3("+%d: %s %d\n", pc, opcode.name, operand));
			
			pc += 2;
			// dispatch on bytecode
			match (opcode) {
				_ => ;
			}
		}

	}
}

layout Instruction {
	+0  opcode:  Opcode;
	+1  operand: byte; // you may treat this as unsigned or signed depending on opcode
	=2;
}

component Bytecodes {
	def inspect(code: Array<byte>) {
		var pc = 0;
		while (pc < code.length) {
			def bytecode = Ref<Instruction>.at(code, pc);
			def opcode   = bytecode.opcode;
			def operand  = bytecode.operand;

			System.puts(Strings.format3("+%d: %s %d\n", pc, opcode.name, operand));
			
			pc += 2;
			// dispatch on bytecode
			match (opcode) {
				_ => ;
			}
		}
	}
}


// def main(args: Array<string>) -> int {
// 	def code: Array<byte> = [0, 0, 0, 1, 0, 2, 1, byte.view(-3)];
// 
// 	inspect(code);
// 
// 	return 0;
// }
def funcToFunc(f: ASTData.Func) -> Func {
	return Func.new(f.id, f.params, f.body);
}

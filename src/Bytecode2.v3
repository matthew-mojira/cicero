/* Refactor Bytecode class into BytecodeBuilder which creates Bytecode
 */

class Bytecode2(instrs:     Array<byte>, 
		locals:     Array<string>,
                stringPool: Array<string>,
                constPool:  Array<Object>,
                classPool:  Array<ClassObject -> ClassObject>,
                sourceMap:  Array<FileRange>) // indexed by what? if we do non-uniform instruction length
// ??? = captured variables (by name or by index in previous locals?--troublesome in mixed-tier code, if that ever exists)
{}
 
class BytecodeCompiler {
	def writer:     DataWriter     = DataWriter.new();

	def strings:    Vector<string> = Vector.new();
	def classholes: Vector<ClassObject -> ClassObject> = Vector.new();
	def constants:  Vector<Object> = Vector.new();
	def locals:     Vector<string> = Vector.new();

	/* Source mappings */
	def source: Vector<FileRange>  = Vector.new();

	new(ast: AST, params: Array<string>) {
		locals.puta(params);
		compileAST(ast);
	}

	def compile() -> Bytecode2 {
		return Bytecode2.new(writer.extract(), 
				locals.extract(), 
				strings.extract(), 
				constants.extract(), 
				classholes.extract(), 
				source.extract());
	}
	
	def writeInstr(loc: FileRange, op: Opcode) {
		if (op.operandType != OperandType.NONE) System.error("compile error", "writeInstr called with opcode that requires operand");
		def pos = writer.pos;

		writer.putb(op.tag);

		source.put(loc);
	}

	def writeInstrWithOperand(loc: FileRange, op: Opcode, operand: int) {
		if (op.operandType != OperandType.ULEB) System.error("compile error", "writeInstrWithOperand called with opcode that does not have uleb operand");
		def pos = writer.pos;

		writer.putb(op.tag);
		writer.put_uleb32(u32.!(operand));

		// write source locations for as many bytes have been written
		for (i < pos - writer.pos) source.put(loc);
	}

	// Write a jump instruction, leaving a hole for the operand to be filled
	// in later. Returns the position where the SLEB will be written later.
	def writeInstrDeferOperand(loc: FileRange, op: Opcode) -> int {
		if (op.operandType != OperandType.SLEB) System.error("compile error", "writeInstrDeferOperand called with opcode that does not have sleb operand");
		for (i < 6) source.put(loc);
		
		writer.putb(op.tag);
		return writer.skip_leb32();
	}

	def fillSLEBOperand(idx: int, val: int) {
		def pos = writer.pos;
		writer.at(idx);
		writer.overwrite_sleb32(val);
		writer.at(pos);
	}

	def compileAST(ast: AST) {
		def loc = ast.loc;
		match (ast.data) {
			Lit(obj) => writeInstrWithOperand(loc, Opcode.LOAD_CONST, addConstant(obj));
			VarGet(id, mode) => match (mode.data) {
				Local  => writeInstrWithOperand(loc, Opcode.LOAD_LOCAL, addLocal(id));
				Global => writeInstrWithOperand(loc, Opcode.LOAD_GLOBAL, addString(id));
			}
			VarSet(id, mode, code) => {
				compileAST(code);
				writeInstrWithOperand(loc, Opcode.DUPE, 0);
				match (mode.data) {
					Local  => writeInstrWithOperand(loc, Opcode.STORE_LOCAL, addLocal(id));
					Global => writeInstrWithOperand(loc, Opcode.STORE_GLOBAL, addString(id));
				}
			}
			And(left, right) => {
				compileAST(left);
				def hole = writeInstrDeferOperand(loc, Opcode.JUMP_IF_FALSE_PEEK);
				compileAST(right);
				fillSLEBOperand(hole, (writer.pos - hole) - 5);
			}
			Or(left, right) => {
				compileAST(left);
				def hole = writeInstrDeferOperand(loc, Opcode.JUMP_IF_TRUE_PEEK);
				compileAST(right);
				fillSLEBOperand(hole, (writer.pos - hole) - 5);
			}
			Apply(tgt, args) => {
				compileAST(tgt);
				writeInstr(loc, Opcode.ASSERT_FUNC);
				for (arg in args) {
					compileAST(arg);
				}
				writeInstrWithOperand(loc, Opcode.CALL, args.length);
			}
			If(cond, tru, fals) => {
				compileAST(cond);
				def hole1 = writeInstrDeferOperand(loc, Opcode.JUMP_IF_FALSE);
				compileAST(tru);
				def hole2 = writeInstrDeferOperand(loc, Opcode.JUMP);
				fillSLEBOperand(hole1, (writer.pos - hole1) - 5);
				compileAST(fals);
				fillSLEBOperand(hole2, (writer.pos - hole2) - 5);
			}
			Cond(cases) => {
				def ends: Vector<int> = Vector.new();
				for (c in cases) {
					def cond = c.0;
					def body = c.1;

					compileAST(cond);
					def hole = writeInstrDeferOperand(loc, Opcode.JUMP_IF_FALSE);
					compileAST(body);
					def end = writeInstrDeferOperand(loc, Opcode.JUMP);
					ends.put(end);
					fillSLEBOperand(hole, (writer.pos - hole) - 5);
				}
				def idx = constants.length;
				// XXX object creation in AST compilation!
				// could be problematic if we object lookup observable
				writeInstrWithOperand(loc, Opcode.LOAD_CONST, addConstant(StrObjects.getStrObject(Exceptions.noTrueBranch)));
				writeInstr(loc, Opcode.RAISE);
				// fill in all jump to end targets
				for (hole in ends.extract()) {
					fillSLEBOperand(hole, (writer.pos - hole) - 5);
				}
			}
			Func(id, params, code) => {
				// XXX compiling code
				code.compile2(params);
				
				// XXX object creation in AST compilation!
				def cst = addConstant(FuncObjects.newFO(id, params, code));
			
				writeInstrWithOperand(loc, Opcode.LOAD_CONST, cst);
			}
			Raise(exn) => {
				compileAST(exn);
				writeInstr(loc, Opcode.RAISE);
			}
			Catch(try, id, b, catch) => {
				source.put(loc);
				def hole1 = writeInstrDeferOperand(loc, Opcode.TRY);

				compileAST(try);

				writeInstr(loc, Opcode.CATCH);

				def hole2 = writeInstrDeferOperand(loc, Opcode.JUMP);

				fillSLEBOperand(hole1, (writer.pos - hole1) - 5);
					
				source.put(loc);
				match (b.data) {
					Local  => writeInstrWithOperand(loc, Opcode.STORE_LOCAL, addLocal(id));
					Global => writeInstrWithOperand(loc, Opcode.STORE_GLOBAL, addString(id));
				}

				compileAST(catch);
				fillSLEBOperand(hole2, (writer.pos - hole2) - 5);
			}
			Begin(exprs) => {
				for (i < exprs.length - 1) {
					compileAST(exprs[i]);
					writeInstrWithOperand(loc, Opcode.POP, 1);
				}
				compileAST(exprs[exprs.length - 1]);
			}
			While(cond, body) => {
				def head = writer.pos;
				compileAST(cond);
				def hole1 = writeInstrDeferOperand(loc, Opcode.JUMP_IF_FALSE_PEEK);
				compileAST(body);
				writeInstrWithOperand(loc, Opcode.POP, 1);
				def hole2 = writeInstrDeferOperand(loc, Opcode.JUMP);
				fillSLEBOperand(hole2, head - writer.pos);
				fillSLEBOperand(hole1, (writer.pos - hole1) - 5);
			}
			GetField(id, obj) => {
				compileAST(obj);
				writeInstrWithOperand(loc, Opcode.LOAD_FIELD, addString(id));
			}
			SetField(id, obj, val) => {
				compileAST(obj);
				compileAST(val);
				writeInstrWithOperand(loc, Opcode.SWAP, 1);
				writeInstrWithOperand(loc, Opcode.DUPE, 1);
				writeInstrWithOperand(loc, Opcode.STORE_FIELD, addString(id));
			}
			Class(id, superclass, init, fields, methods) => {
				// there are subcodes which are getting compiled here
				// TODO should this compilation process just be part of code creation?
				match (superclass) {
					Nothing => {
						def idx = constants.length;
						writeInstrWithOperand(loc, Opcode.LOAD_CONST, addConstant(ClassObjects.classBase));
					}
					Just(expr) => compileAST(expr);
				}
				var init2: CodeObject;
				match (init) {
					Nothing => ;
					Just(code) => {
						code.compile2(["self"]);
						init2 = code;
					}
				}
				// XXX compiling subcode
				for (field in fields) field.1.compile2([]);
				//                                   XXX
				def idx = addClasshole(ClassObjects.classhole(id, init2, fields, Arrays.map(methods, funcToFunc)));
				writeInstrWithOperand(loc, Opcode.CREATE_CLASS, idx);
			}
			New(obj) => {
				compileAST(obj);
				writeInstr(loc, Opcode.CREATE_OBJECT);
			}
			List(elems) => {
				for (elem in elems)
					compileAST(elem);
				writeInstrWithOperand(loc, Opcode.CREATE_LIST, elems.length);
			}
//			_ => System.error("compile error", "unsupported AST node");
		}
		
	}

	def addString(str: string) -> int {
		// check for existing string
		for (i = 0; i < strings.length; i++) {
			if (Strings.equal(strings[i], str))
				return i;
		}
		def idx = strings.length;
		strings.put(str);
		return idx;
	}

	def addClasshole(clazz: ClassObject -> ClassObject) -> int {
		def idx = classholes.length;
		classholes.put(clazz);
		return idx;
	}

	def addConstant(const: Object) -> int {
		def idx = constants.length;
		constants.put(const);
		return idx;
	}

	def addLocal(id: string) -> int {
		for (i < locals.length) {
			if (Strings.equal(locals[i], id))
				return i;
		}
		def idx = locals.length;
		locals.put(id);
		return idx;
	}

	/* print this bytecode */
	def inspect();
}

def funcToFunc(f: ASTData.Func) -> FuncObject {
	// XXX compilation here
	f.body.compile(Arrays.prepend("self", f.params));
	return FuncObjects.newFO(f.id, f.params, f.body);
}

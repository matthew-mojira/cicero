class ClassObject(
		name: string, 
		superclass: ClassObject,  // XXX: base class has superclass == null
		init: CodeObject,
		classFields: Array<(string, CodeObject)>, 
		classMethods: Array<FuncObject>) extends Object {
		// FIXME perhaps we don't specify methods as func *objects* but funcholes

	def nameH = Strings.hash(name);
	def hash() -> int {
		return nameH;
	}

	def display() -> string { return Strings.format1("<class '%s'>", name); }
	def isTrue()  -> bool   { return true; }

	def c_superclass() -> Result {
		if (superclass == null) {
			return Result.Exn(ExnObjects.fromVirgil(Strings.format1("%s.superclass", name), "class has no superclass"));
		} else {
			return Result.OK(superclass);
		}
	}
	def c_name() -> Result {
		return Result.OK(StrObjects.getStrObject(name));
	}
	def c_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}

def b:  Array<ClassObject> = Array.new(1);
def o:  Array<ClassObject> = Array.new(1);
def s:  Array<ClassObject> = Array.new(1);
def i:  Array<ClassObject> = Array.new(1);
def io: Array<ClassObject> = Array.new(2);

/* The built-in classes. The order of these is alphabetical, which is fine. The
 * order must satisfy a topological ordering of the tree structure of the
 * class hierarchy.
 */
component ClassObjects {
	def classBase = ClassObject.new("base", null,
			null,
			[],
			// cannot initialize Func (or underlying Code) because the class doesn't exist yet
			// we can refactor to reduce the need for the FuncObject, but not the CodeObject

			[FuncObjects.fromVirgilMethod0("class",        Object.o_getclass), // 0
			 FuncObjects.fromVirgilMethod0("fields",       Object.o_fields),   // 1
			 FuncObjects.fromVirgilMethod0("display",      Object.o_display),  // 2
			 FuncObjects.fromVirgilMethod1("get-field", s, Object.o_getfield), // 3
			 FuncObjects.fromVirgilMethod1("=",  o,        Object.o_eq),       // 4
			 FuncObjects.fromVirgilMethod1("!=", o,        Object.o_neq)       // 5
			]);
	def classBool =	ClassObject.new("bool", classBase, 
			CodeObjects.virgilFail, 
			[], 
			[FuncObjects.fromVirgilMethod0("display", BoolObject.b_display),
			 FuncObjects.fromVirgilMethod0("not",     BoolObject.b_not),
			 FuncObjects.fromVirgilMethod1("and", b,  BoolObject.b_and),
			 FuncObjects.fromVirgilMethod1("or",  b,  BoolObject.b_or)
			]);
	def classClass = ClassObject.new("class", classBase,
			CodeObjects.virgilFail, 
 			[], 
 			[FuncObjects.fromVirgilMethod0("display",    ClassObject.c_display),
 			 FuncObjects.fromVirgilMethod0("superclass", ClassObject.c_superclass),
 			 FuncObjects.fromVirgilMethod0("name",       ClassObject.c_name)
 			]);
	def classCode  = ClassObject.new("code",  classBase, CodeObjects.virgilFail, [],
			[FuncObjects.fromVirgilMethod0("display", CodeObject.co_display)]);
	def classExn   = ClassObject.new("exn",   classBase, CodeObjects.virgilFail, [], 
			[FuncObjects.fromVirgilMethod0("display",    ExnObject.e_display),
			 FuncObjects.fromVirgilMethod0("stacktrace", ExnObject.e_stacktrace)]);
	def classFrame = ClassObject.new("frame", classBase, CodeObjects.virgilFail, [],
			[FuncObjects.fromVirgilMethod0("display", FrameObject.fr_display)]);
	def classFunc = ClassObject.new("func", classBase, 
			CodeObjects.virgilFail,
			[],
			[FuncObjects.fromVirgilMethod0("display", FuncObject.f_display),
			 FuncObjects.fromVirgilMethod0("name",    FuncObject.f_name),
			 FuncObjects.fromVirgilMethod0("params",  FuncObject.f_params),
			 FuncObjects.fromVirgilMethod0("code",    FuncObject.f_code)
			]);
	def classInt = ClassObject.new("int", classBase, 
			CodeObjects.virgilFail, 
			[], 
			[FuncObjects.fromVirgilMethod0("display", IntObject.i_display),
			 FuncObjects.fromVirgilMethod0("succ",    IntObject.i_succ),
			 FuncObjects.fromVirgilMethod0("pred",    IntObject.i_pred),
			 FuncObjects.fromVirgilMethod0("neg",     IntObject.i_neg),
			 FuncObjects.fromVirgilMethod1("+",  i,   IntObject.i_add),
			 FuncObjects.fromVirgilMethod1("-",  i,   IntObject.i_sub),
			 FuncObjects.fromVirgilMethod1("*",  i,   IntObject.i_mul),
			 FuncObjects.fromVirgilMethod1("/",  i,   IntObject.i_div),
			 FuncObjects.fromVirgilMethod1("%",  i,   IntObject.i_mod),
			 FuncObjects.fromVirgilMethod1("=",  o,   IntObject.i_eq),
			 FuncObjects.fromVirgilMethod1("!=", o,   IntObject.i_neq),
			 FuncObjects.fromVirgilMethod1("<",  i,   IntObject.i_lt),
			 FuncObjects.fromVirgilMethod1("<=", i,   IntObject.i_leq),
			 FuncObjects.fromVirgilMethod1(">",  i,   IntObject.i_gt),
			 FuncObjects.fromVirgilMethod1(">=", i,   IntObject.i_geq),
			 FuncObjects.fromVirgilMethod1("&",  i,   IntObject.i_and),
			 FuncObjects.fromVirgilMethod1("|",  i,   IntObject.i_ora),
			 FuncObjects.fromVirgilMethod1("^",  i,   IntObject.i_eor),
			 FuncObjects.fromVirgilMethod1(">>", i,   IntObject.i_asr),
			 FuncObjects.fromVirgilMethod1("<<", i,   IntObject.i_asl),
			 FuncObjects.fromVirgilMethod1(">>>",i,   IntObject.i_lsr)
			]);
	def classList = ClassObject.new("list", classBase, 
			CodeObjects.virgilFail, 
			[], 
			[FuncObjects.fromVirgilMethod0("display", ListObject.l_display),
			 FuncObjects.fromCiceroMethod ("=",       CiceroMethods.l_eq),
			 FuncObjects.fromVirgilMethod1("get", i,  ListObject.l_get),
			 FuncObjects.fromVirgilMethod2("set", io, ListObject.l_set),
			 FuncObjects.fromVirgilMethod1("put", o,  ListObject.l_put),
			 FuncObjects.fromVirgilMethod0("length",  ListObject.l_length),
			 FuncObjects.fromVirgilMethod0("reverse", ListObject.l_reverse)
			]);
	def classMap = ClassObject.new("map", classBase, CodeObjects.virgilFail, [],
			[FuncObjects.fromVirgilMethod0("display", MapObject.p_display)]);
	def classMethod = ClassObject.new("method", classFunc, 
			CodeObjects.virgilFail,
			[], 
			[FuncObjects.fromVirgilMethod0("display", MethodObject.m_display),
			 FuncObjects.fromVirgilMethod0("object",  MethodObject.m_object)]);
	def classPoopCrap = ClassObject.new("poopcrap", classBase, CodeObjects.virgilFail, [], 
			[FuncObjects.fromVirgilMethod0("display", PoopCrapObject.pc_display)]);
	def classStr = ClassObject.new("str", classBase, CodeObjects.virgilFail, [],
			[FuncObjects.fromVirgilMethod0("display", StrObject.s_display)]);


	/* --- */
	def classhole(name: string, init: CodeObject, classFields: Array<(string, CodeObject)>, classMethods: Array<FuncObject>) -> (ClassObject -> ClassObject) {
		return ClassObject.new(name, _, init, classFields, classMethods);
	}
}

def stuff1 = o[0]  = ClassObjects.classBase;
def stuff2 = b[0]  = ClassObjects.classBool;
def stuff3 = i[0]  = ClassObjects.classInt;
def stuff4 = io[0] = ClassObjects.classInt;
def stuff5 = io[1] = ClassObjects.classBase;
def stuff6 = s[0] = ClassObjects.classStr;



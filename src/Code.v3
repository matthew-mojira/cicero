class Code(range: FileRange) {
	private new() {}
	
	def var virgil: Range<Object> -> (Object, bool);
	def var ast: AST;

	def var tier: i2;
}

component Codes {
	def fromVirgil(fn: Range<Object> -> (Object, bool)) -> Code {
		def code = Code.new(null);
		code.virgil = fn;
		code.tier = -1;
		return code;
	}
	def fromAST(ast: AST, range: FileRange) -> Code {
		def code = Code.new(range);
		code.ast = ast;
		code.tier = 0;
		return code;
	}
	def virgilFail: Code = fromVirgil(doNotInstantiateThisClass);
	def virgilPoopCrap: Code = fromVirgil(justReturnPoopCrap);
}

def doNotInstantiateThisClass(range: Range<Object>) -> (Object, bool) {
	return (StrObjects.getStrObject("do not use `new` to instantiate this class"), true);
}

def justReturnPoopCrap(range: Range<Object>) -> (Object, bool) {
	if (range.length > 0) System.error("internal error", "poopcrap virgil > 0");
	return (PoopCrapObjects.instance, false);
}

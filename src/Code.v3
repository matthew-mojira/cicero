def TIER_UP = 10;

class Code(range: FileRange) {
	private new() {}

	def var runCount = 0;
	
	def var virgil: Range<Object> -> (Object, bool);
	def var ast: AST; // root node
	def var bytecode: Bytecode;

	def var tier: i2;

	def incrementCount() {
//  		runCount++;
//  		if (runCount > 10 && tier == 0) {
//  			System.puts("tiering up!\n");
//  			compile();
//  		}
	}

	/* Compile code */
	def compile() {
		if (tier < 0) System.error("compile error", "attempting to compile Virgil code to bytecode");
		if (tier > 0) System.error("compile error", "compiling what has already been compiled to bytecode");
		bytecode = Bytecode.new(ast);
		tier = 1;
	}

}

component Codes {
	def fromVirgil(fn: Range<Object> -> (Object, bool)) -> Code {
		def code = Code.new(null);
		code.virgil = fn;
		code.tier = -1;
		return code;
	}
	def fromAST(ast: AST) -> Code {
		def code = Code.new(ast.loc);
		code.ast = ast;
		code.tier = 0;

		return code;
	}
	def virgilFail: Code = fromVirgil(doNotInstantiateThisClass);
	def virgilPoopCrap: Code = fromVirgil(justReturnPoopCrap);
}

def doNotInstantiateThisClass(range: Range<Object>) -> (Object, bool) {
	return (StrObjects.getStrObject("do not use `new` to instantiate this class"), true);
}

def justReturnPoopCrap(range: Range<Object>) -> (Object, bool) {
	if (range.length > 0) System.error("internal error", "poopcrap virgil > 0");
	return (PoopCrapObjects.instance, false);
}


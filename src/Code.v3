def TIER_UP = 10;

class CodeObject(range: FileRange) extends Object { // XXX range is null if code is virgil
	def var runCount = 0;
	
	def var virgil: Range<Object> -> Result;
	def var ast: AST; // root node
	def var bytecode: Bytecode;

	def var tier: i2;

	def incrementCount() {
//  		runCount++;
//  		if (runCount > 10 && tier == 0) {
//  			System.puts("tiering up!\n");
//  			compile();
//  		}
	}

	/* Compile code */
	def compile(params: Array<string>) {
		if (tier < 0) System.error("compile error", "attempting to compile Virgil code to bytecode");
		if (tier > 0) System.error("compile error", "compiling what has already been compiled to bytecode");
		bytecode = Bytecode.new(ast, params);
		tier = 1;
	}

	def display() -> string { return "<code>"; }
	def isTrue()  -> bool   { return true; }
	
	def co_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}

component CodeObjects {

	def fromVirgil(func: Range<Object> -> Result) -> CodeObject {
		def code = CodeObject.new(null); // XXX null
		code.virgil = func;
		code.tier = -1;
		return code;
	}

	def fromAST(ast: AST) -> CodeObject {
		// XXX should this be allowed?
		if (ast == null) return null;

		def code = CodeObject.new(ast.loc);
		code.ast = ast;
		code.tier = 0;

		return code;
	}

	def virgilFail: CodeObject = fromVirgil(doNotInstantiateThisClass);
	def virgilPoopCrap: CodeObject = fromVirgil(justReturnPoopCrap);
}

def justReturnPoopCrap(range: Range<Object>) -> Result {
	if (range.length > 0) System.error("internal error", "poopcrap virgil > 0");
	return Result.OK(PoopCrapObjects.instance);
}

def doNotInstantiateThisClass(range: Range<Object>) -> Result {
	return Result.Exn(ExnObjects.fromVirgil("doNotInstantiateThisClass", Exceptions.doNotInstantiateThisClass));
}

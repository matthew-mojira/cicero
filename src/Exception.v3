class ExnObject extends Object {
	var message: StrObject;
	def stacktrace: Vector<(string, FileRange)> = Vector.new();
	// TODO handle Virgil locations better?
	
	new(msg: string, fn: string, loc: FileRange) {
		message = StrObjects.getStrObject(msg);
		stacktrace.put((fn, loc));
	}

	def display() -> string {
		return Strings.format1("<exception '%s'>", message.str);
	}

	def print() {
		def str = StringBuilder.new();
		str.puts(Strings.format1("exception: %s\n", message.str));
		for (i < stacktrace.length) {
			def range = stacktrace[i].1;
			def fn = stacktrace[i].0;
			str.put1("  at %s (", fn);
			if (range == null) {
				str.puts("<Virgil code>");
			} else {
				str.put3("%s:%d:%d", range.fileName, range.beginLine, range.beginColumn);
			}
			str.puts(")\n");
		}
		System.puts(str.extract());
	}
	
	def e_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}

component ExnObjects {
	// def typeMismatch(exp: ClassObject, act: ClassObject)

	def fromVirgil(fn: string, msg: string) -> ExnObject {
		return ExnObject.new(msg, fn, null);
	}

	// TODO use this
	def fromStrObject(str: StrObject, fn: string, loc: FileRange) -> ExnObject {
		def obj = ExnObject.new(null, fn, loc);
		obj.message = str;
		return obj;
	}
}

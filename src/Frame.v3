/* FrameObject refers to the `frame` type in Cicero, but in Virgil this is
 * an abstract class extended by Virgil/AST/Bytecode frames internally.
 */
class FrameObject extends Object {
	def code: CodeObject;
	def args: Array<(string, Object)>;
	def display() -> string { return Strings.format1("<frame '%s'>", name); }
	def isTrue()  -> bool   { return true; }

	var globals: HashMap<string, Object>;
	def var name: string;

	private new(prev: FrameObject, code, args) {
		if (prev == null) {
			globals = Strings.newMap();
		} else {
			globals = prev.globals;
		}
	}

	// status flags as the result of evaluation
	var result: Result;

	// retrieving results, but check first!
	def getValue() -> Object {
		return Result.OK.!(result).value;
	}

	def getExn() -> ExnObject {
		return Result.Exn.!(result).exn;
	}

	/* Current location of the evaluation. This doesn't need to be exact, but it
	 * should be correct whenever an exception is raised so that the stacktrace
	 * is accurate.
	 */
	var loc: FileRange;

	/* How to evaluate this frame. It must set {result} based on what happens. */
	def eval();
	// XXX this is for top-level code. note that this may have a discrepancy in tiers!
	def evalCode(code: CodeObject) -> Object;

	def newFrame(name: string, code: CodeObject, args: Array<(string, Object)>, nonlocals: Array<(string, Object)>) -> FrameObject {
		return FrameObjects.newFrame(this, name, code, args, nonlocals);
	}

	// throw sets the exception value in the frame right away
	def throw(msg: string) {
		result = Result.Exn(ExnObjects.fromStrObject(StrObjects.fromString(msg), name, loc));
	}
	def rethrow(exn: ExnObject) {
		exn.stacktrace.put((name, loc));
		result = Result.Exn(exn);
	}

	def isExn() -> bool {
		return Result.Exn.?(result);
	}

	def resetExn() {
		result = Result.Uncomputed;
	}

	def assertType(exp: ClassObject, val: Object) {
		if (!val.instanceOf(exp))
			throw(Exceptions.typeMismatch(exp, val));
	}

	def assertArity<T>(argc: int, vals: Range<T>) {
		if (vals.length != argc)
			throw(Exceptions.arityMismatch(argc, vals.length));
	}

	/* methods */

	def fr_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}

component FrameObjects {
	def newFrame(prev: FrameObject, name: string, code: CodeObject, args: Array<(string, Object)>, nonlocals: Array<(string, Object)>) -> FrameObject {
		if (CiceroOptions.traceFunctionCalls) {
			System.puts(name);
			System.puts("(");
			for (i < args.length) {
				def arg = args[i];
				System.puts(arg.0);
				System.puts(" = ");
				System.puts(arg.1.display());
				if (i < args.length - 1)
					System.puts(", ");
			}
			System.puts(")\n");
		}

		var frame: FrameObject;
		match (code.code) {
			Virgil   => frame = VirgilFrame.new(prev, code, args);
			AST      => frame = ASTFrame.new(prev, code, args, nonlocals);
			Bytecode => frame = BytecodeFrame.new(prev, code, args, nonlocals);
			Wasm     => frame = WasmFrame.new(prev, code, args, nonlocals);
		}
		frame.name = name;
		return frame;
	}
	def newTopFrame() -> FrameObject {
		var frame: FrameObject;
		if (CiceroOptions.enableTier1) {
			frame = BytecodeFrame.new(null, null, null, null);
		} else {
			frame = ASTFrame.new(null, null, null, null);
		}
		for (builtin in Builtin.set.all) {
			frame.globals[builtin.id] = builtin.val;
		}
		frame.name = "repl";
		return frame;
	}
}

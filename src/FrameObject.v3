// TODO generalize code to ExprObject (and maybe rename ExprObject to CodeObject)
class FrameObject(prev: FrameObject, locals: HashMap<string, Object>, code: Expr) extends Object {
	var globals: HashMap<string, Object>;

	// you could replace this with a higher-tier evaluation function
	var evalFunc: Expr -> Object;

	// status flags as the result of evaluation
	var exn: bool = false;  // whether evaluation threw uncaught exception
	var val: Object;         // result of evaluation or exception value

	/* Initializing the frame also evaluates it (except for top-level frames). */
	new() {
		evalFunc = tier0Eval;
		if (prev == null) {
			// this is the top-level frame, where locals = globals
			globals = locals;
		} else {
			globals = prev.globals;

			// evaluate the frame
			def v = evalFunc(code);
			if (!exn)
				val = v;
		}
	}

	// special function for top-level frame to let it evaluate multiple expressions 
	def eval(expr: Expr) {
		if (prev != null) System.error("eval error", "attempted to evaluate expression not in top level");

		def v = evalFunc(expr);
		if (!exn)
			val = v;
		// XXX no return value, inspect the frame instead
	}

	private def tier0Eval(expr: Expr) -> Object {
		var value: Object;

		match (expr.data) {
			Lit(val) => value = val;
			Id(id) => {
				if (locals.has(id)) {
					value = locals[id];
				} else if (globals.has(id)) {
					value = globals[id];
				} else {
					throw(StrObjects.getStrObject(Strings.format1("unbound identifier: %s", id)));
				}
			}
			Apply(tgt, args) => {
				def tgtVal = tier0Eval(tgt);
				// remember: these are recursive calls within `tier0Eval` but
				// have nothing to do with evaluation frames in the language
				if (exn) return value;
				// FIXME improve type checking
				if (!FuncObject.?(tgtVal)) {
					assertType(Type.Func, tgtVal);
					return value;
				}

				def argv: Array<Object> = Array.new(args.length);
				for (i < argv.length) {
					def arg = tier0Eval(args[i]);
					if (exn) return value;
					argv[i] = arg;
				}

				// function call
				def fv = FuncObject.!(tgtVal);
				def params = fv.params, code = fv.expr;

				// arity check
				assertArity(params.length, argv);
				if (exn) return value;

				def newLocals: HashMap<string, Object> = Strings.newMap();
				// method info
				if (MethodObject.?(fv)) {
					// FIXME magic string
					newLocals["self"] = MethodObject.!(fv).obj;
				}
				// arguments
				for (i < argv.length) {
					newLocals[params[i]] = argv[i];
				}

				match (code.impl) {
					AST(expr) => {
						// create new frames here!
						def frame = FrameObject.new(this, newLocals, expr);
						if (frame.exn) {
							// rethrow
							throw(frame.val);
							return value;
						}
						value = frame.val;
					}
					Virgil(func) => {
						// function call
						def ret = func(argv);
						def val = ret.0, fnExn = ret.1;

						if (fnExn) {
							throw(val);
							return value;
						} else {
							value = val;
						}	
					}
				}
			}
			If(exprC, exprT, exprF) => {
				def cond = tier0Eval(exprC);
				if (exn) return value;

				if (cond.isTrue()) {
					def v = tier0Eval(exprT);
					if (exn) return value;
					value = v;
				} else {
					def v = tier0Eval(exprF);
					if (exn) return value;
					value = v;
				}
			}
			Raise(expr) => {
				def v = tier0Eval(expr);
				if (exn) return value;

				throw(v);
			}
			Catch(try, catch) => {
				def v = tier0Eval(try);
				if (!exn) {
					value = v;
				} else {
					// catch exception
					exn = false;
					def e = tier0Eval(catch);
					if (exn) return value;
					value = e;
				}
			}
			Func(id, params, body) => {
				def f = FuncObject.new(params, ExprObject.new(Impl.AST(body)));
				locals[id] = f;
				value = f;
			}
			Class(id, fields) => {
				def c = ClassObject.new(fields);
				locals[id] = c;
				value = c;
			}
			Assign(id, expr) => {
				def v = tier0Eval(expr);
				if (exn) return value;
				locals[id] = v;
				value = v;
			}
			Cond(cases) => {
				var sat = false;
				for (c in cases) {
					// case
					def cond = c.0, expr = c.1;

					// check cond
					def t = tier0Eval(cond);
					if (exn) return value;
					if (t.isTrue()) {
						def v = tier0Eval(expr);
						if (exn) return value;
						value = v;

						sat = true;
						break;
					}
				}

				if (!sat) {
					throw(StrObjects.getStrObject("cond error: no true branch"));
				}
			}
			While(cond, body) => {
				while (true) {
					def v = tier0Eval(cond);
					if (exn) return value;

					if (!v.isTrue()) {
						value = v;
						break;
					}

					tier0Eval(body);
					if (exn) return value;
				}
			}
			Begin(exprs) => {
				var last: Object;
				for (expr in exprs) {
					def v = tier0Eval(expr);
					if (exn) return value;

					last = v;
				}
				value = last;
			}
			GetField(field, expr) => {
				var obj = tier0Eval(expr);
				if (exn) return value;

				if (obj.fields.has(field)) {
					value = obj.fields[field];
				} else {
					throw(StrObjects.getStrObject(Strings.format1("name error: unknown field %s", field)));
					return value;
				}
			}
			SetField(field, expr, newExpr) => {
				var obj = tier0Eval(expr);
				if (exn) return value;

				var val = tier0Eval(newExpr);
				if (exn) return value;

				value = obj.fields[field];
				if (obj.fields.has(field)) {
					obj.fields[field] = val;
					value = val;
				} else {
					throw(StrObjects.getStrObject(Strings.format1("name error: unknown field %s", field)));
					return value;
				}
			}
			New(expr) => {
				var cls = tier0Eval(expr);
				if (exn) return value;

				assertType(Type.Class, cls);
				if (exn) return value;

				var obj = ObjectObject.new();
				for (field in ClassObject.!(cls).classFields) {
					match (field) {
						Field(name, expr) => {
							var v = tier0Eval(expr);
							if (exn) return value;
							obj.fields[name] = v;
						}
						Method(name, params, body) => {
							def m = MethodObject.new(obj, params, ExprObject.new(Impl.AST(body)));
							obj.fields[name] = m;
						}
					}
				}
				return obj;
			}
		}

		return value;
	}
	
	def typeof()  -> Type   { return Type.Frame; }
	def display() -> string { return "<frame>"; }
	def isTrue()  -> bool   { return true; }

	/* throwing exceptions */

	// throw sets the exception value in the frame right away
	private def throw(value: Object) {
		exn = true;
		val = value;
	}

	private def assertType(exp: Type, val: Object) {
		if (exp != val.typeof())
			throw(StrObjects.getStrObject(Strings.format2("type mismatch: expected %s, got %s", exp.display(), val.typeof().display())));
	}

	private def assertArity(argc: int, vals: Range<Object>) {
		if (vals.length != argc)
			throw(StrObjects.getStrObject(Strings.format2("arity mismatch: expected %d, got %d", argc, vals.length)));
	}

}

class FrameObject(prev: FrameObject, 
		locals: HashMap<string, Object>, //  \
		args: Array<Object>,             //  / XXX combine these together
		code: CodeObject) extends Object {
	var globals: HashMap<string, Object>;

	// status flags as the result of evaluation
	var exn: bool = false;  // whether evaluation threw uncaught exception
	var val: Object;        // result of evaluation or exception value

	/* Initializing the frame also evaluates it (except for top-level frames). */
	new() super(FrameObjects.classFrame) {
		if (prev == null) {
			// this is the top-level frame, where locals = globals
			globals = locals;
		} else {
			globals = prev.globals;

			// evaluate the frame
			eval(code.code);
		}
	}

	/* You should inspect the frame to determine if the frame is meaningful. If
	 * there is no exception in the frame, then you can accept the value.
	 * Otherwise, ignore the return value. It is usually, but not guaranteed, to
	 * be null.
	 */
	def eval(code: Code) -> Object {
		// dispatch on the code tier
		def evalFuncs = [virgilEval, tier0Eval];
		def v = evalFuncs[code.tier + 1](code);
		if (!exn)
			val = v;
		return v;
	}

	private def virgilEval(code: Code) -> Object {
		def ret = code.virgil(args);
		val = ret.0;
		exn = ret.1;
		return val;
	}

	private def tier0Eval(code: Code) -> Object {
		var value: Object;

		match (code.ast) {
			Lit(val) => value = val;
			Id(id) => {
				if (locals.has(id)) {
					value = locals[id];
				} else if (globals.has(id)) {
					value = globals[id];
				} else {
					throw(StrObjects.getStrObject(Strings.format1("unbound identifier: %s", id)));
				}
			}
			Apply(tgt, args) => {
				def tgtVal = eval(tgt);
				if (exn) return value;
				// FIXME improve type checking
				if (!FuncObject.?(tgtVal)) {
					assertType(Type.Func, tgtVal);
					return value;
				}
				// function code
				def fv = FuncObject.!(tgtVal);
				def params = fv.params, code = fv.code;

				// evaluate argument values
				var argv: Array<Object> = Array.new(args.length);
				for (i < argv.length) {
					def arg = eval(args[i]);
					if (exn) return value;
					argv[i] = arg;
				}

				// arity check
				assertArity(params.length, argv);
				if (exn) return value;

				// create locals
				def newLocals: HashMap<string, Object> = Strings.newMap();
				for (i < argv.length) {
					newLocals[params[i]] = argv[i];
				}

				// if this is a method, insert extra locals or arguments
				if (MethodObject.?(fv)) {
					newLocals["self"] = MethodObject.!(fv).obj;
					argv = Arrays.prepend(MethodObject.!(fv).obj, argv);					
				}

				// create new frame (and evaluate)
				def frame = FrameObject.new(this, newLocals, argv, code);
				if (frame.exn) {
					// rethrow
					throw(frame.val);
					return value;
				}
				value = frame.val;
			}
			If(exprC, exprT, exprF) => {
				def cond = eval(exprC);
				if (exn) return value;

				if (cond.isTrue()) {
					def v = eval(exprT);
					if (exn) return value;
					value = v;
				} else {
					def v = eval(exprF);
					if (exn) return value;
					value = v;
				}
			}
			Raise(expr) => {
				def v = eval(expr);
				if (exn) return value;

				throw(v);
			}
			Catch(try, catch) => {
				def v = eval(try);
				if (!exn) {
					value = v;
				} else {
					// catch exception
					exn = false;
					def e = eval(catch);
					if (exn) return value;
					value = e;
				}
			}
			Func(id, params, code) => {
				def c = CodeObject.new(code);
				def f = FuncObject.new(id, params, c);
				locals[id] = f;
				value = f;
			}
			Class(id, superclass, init, fields, methods) => {
				var i: CodeObject = if(init.isJust(), CodeObject.new(init.fromJust()), null);
				var s: ClassObject = Objects.classBase;
				// TODO match on {superclass} and evaluate expression
				def f: Array<(string, CodeObject)> = Arrays.map(fields, codeToCodeObject);
				def m: Array<FuncObject> = Arrays.map(methods, funcToFuncObject);
				def c = ClassObject.new(id, s, i, f, m);
				locals[id] = c;
				value = c;
			}
			Assign(id, expr) => {
				def v = eval(expr);
				if (exn) return value;
				locals[id] = v;
				value = v;
			}
			Cond(cases) => {
				var sat = false;
				for (c in cases) {
					// case
					def cond = c.0, expr = c.1;

					// check cond
					def t = eval(cond);
					if (exn) return value;
					if (t.isTrue()) {
						def v = eval(expr);
						if (exn) return value;
						value = v;

						sat = true;
						break;
					}
				}

				if (!sat) {
					throw(StrObjects.getStrObject("cond error: no true branch"));
				}
			}
			While(cond, body) => {
				while (true) {
					def v = eval(cond);
					if (exn) return value;

					if (!v.isTrue()) {
						value = v;
						break;
					}

					eval(body);
					if (exn) return value;
				}
			}
			Begin(exprs) => {
				var last: Object;
				for (expr in exprs) {
					def v = eval(expr);
					if (exn) return value;

					last = v;
				}
				value = last;
			}
			GetField(field, expr) => {
				var obj = eval(expr);
				if (exn) return value;

				match (obj.getField(field)) {
					Just(v) => value = v;
				} else {
					throw(StrObjects.getStrObject(Strings.format1("name error: unknown field %s", field)));
					return value;
				}
			}
			SetField(field, expr, newCode) => {
				var obj = eval(expr);
				if (exn) return value;

				var val = eval(newCode);
				if (exn) return value;

				value = obj.fields[field];
				if (obj.fields.has(field)) {
					obj.fields[field] = val;
					value = val;
				} else {
					throw(StrObjects.getStrObject(Strings.format1("name error: unknown field %s", field)));
					return value;
				}
			}
			New(expr) => {
				var cls = eval(expr);
				if (exn) return value;

				assertType(Type.Class, cls);
				if (exn) return value;

				def clsObj = ClassObject.!(cls);
				def obj = ObjectObject.new(clsObj);

				// initialize fields in superclass order
				def classes: Vector<ClassObject> = Vector.new();
				for (cls = clsObj; cls != null; cls = cls.superclass)
					classes.put(cls);
				
				for (cls in classes.extract()) {
					// initialize fields
					for (field in cls.classFields) {
						def name = field.0, expr = field.1;
						// FIXME this is incorrect if a child class overrides a field with a method
						if (obj.fields.has(name)) continue;

						// XXX hackfix
						if (expr == null) continue;
						var v = eval(expr.code);
						if (exn) return value;
						obj.fields[name] = v;
					}
					// initialize methods?
// 					for (func in cls.classMethods) {
// 						if (obj.fields.has(func.id)) continue;
// 						def m = MethodObject.new(obj, func.id, func.params, func.code);
// 						obj.fields[func.id] = m;
// 					}
					// call initializer
					if (cls.init != null) {
						def code = cls.init;

						def newLocals: HashMap<string, Object> = Strings.newMap();
						newLocals["self"] = obj;
						def argv: Array<Object> = [obj];

						// create new frames here!
						def frame = FrameObject.new(this, newLocals, argv, code);
						if (frame.exn) {
							// rethrow
							throw(frame.val);
							return value;
						}
						value = frame.val;
					}
				}

				return obj;
			}
		}

		return value;
	}
	
	def typeof()  -> Type   { return Type.Frame; }
	def display() -> string { return "<frame>"; }
	def isTrue()  -> bool   { return true; }

	/* throwing exceptions */

	// throw sets the exception value in the frame right away
	private def throw(value: Object) {
		exn = true;
		val = value;
	}

	private def assertType(exp: Type, val: Object) {
		if (exp != val.typeof())
			throw(StrObjects.getStrObject(Strings.format2("type mismatch: expected %s, got %s", exp.display(), val.typeof().display())));
	}

	private def assertArity(argc: int, vals: Range<Object>) {
		if (vals.length != argc)
			throw(StrObjects.getStrObject(Strings.format2("arity mismatch: expected %d, got %d", argc, vals.length)));
	}

}

component FrameObjects {
	def classFrame = ClassObject.new("frame", Objects.classBase, null, [], []);
}

def codeToCodeObject(p: (string, Code)) -> (string, CodeObject) {
	return (p.0, CodeObject.new(p.1));
}

def funcToFuncObject(f: AST.Func) -> FuncObject {
	return FuncObject.new(f.id, f.params, CodeObject.new(f.body));	
}



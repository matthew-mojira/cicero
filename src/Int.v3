class IntObject(val: long) extends Object {
	def display() -> string { return Strings.format1("%d", val); }
	def isTrue()  -> bool   { return true; }

	def i_succ() -> Result { return Result.OK(IntObjects.getIntObject(val + 1)); }
	def i_pred() -> Result { return Result.OK(IntObjects.getIntObject(val - 1)); }
	def i_neg()  -> Result { return Result.OK(IntObjects.getIntObject(-val)); }
	def i_add(that: IntObject) -> Result {
		return Result.OK(IntObjects.getIntObject(this.val + that.val));
	}
	def i_sub(that: IntObject) -> Result {
		return Result.OK(IntObjects.getIntObject(this.val - that.val));
	}
	def i_mul(that: IntObject) -> Result {
		return Result.OK(IntObjects.getIntObject(this.val * that.val));
	}
	def i_div(that: IntObject) -> Result {
		if (that.val == 0) {
			return Result.Exn(ExnObjects.fromVirgil("divide by zero", "int.div"));
		}
		return Result.OK(IntObjects.getIntObject(this.val / that.val));
	}
	def i_mod(that: IntObject) -> Result {
		if (that.val == 0) {
			return Result.Exn(ExnObjects.fromVirgil("divide by zero", "int.mod"));
		}
		return Result.OK(IntObjects.getIntObject(this.val % that.val));
	}
	def i_lt(that: IntObject) -> Result {
		return Result.OK(BoolObjects.getBoolObject(this.val < that.val));
	}
	def i_leq(that: IntObject) -> Result {
		return Result.OK(BoolObjects.getBoolObject(this.val <= that.val));
	}
	def i_gt(that: IntObject) -> Result {
		return Result.OK(BoolObjects.getBoolObject(this.val > that.val));
	}
	def i_geq(that: IntObject) -> Result {
		return Result.OK(BoolObjects.getBoolObject(this.val >= that.val));
	}
	def i_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}


component IntObjects {
	/* canonicalize int value instances */
	def intObjects = HashMap<long, IntObject>.new(int.!, long.==);
	def getIntObject(val: long) -> IntObject {
		if (val > Tiers.maxCachedInt || val < -Tiers.maxCachedInt) {
			// System.puts(Strings.format1("Uncanonicalized integer: %d\n", val));
			return IntObject.new(val);
		}

		if (intObjects.has(val)) return intObjects[val];
		def newInt = IntObject.new(val);
		intObjects[val] = newInt;
		return newInt;
	}
}


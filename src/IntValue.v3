class IntValue(val: long) extends Value {
	private new () {}

	def typeof()  -> Type   { return Type.Int; }
	def display() -> string { return Strings.format1("%d", val); }
	def isTrue()  -> bool   { return true; }
}


component IntValues {
	/* canonicalize int value instances */
	def intValues = HashMap<long, IntValue>.new(int.!, long.==);
	def getIntValue(val: long) -> IntValue {
		if (intValues.has(val)) return intValues[val];
		def newInt = IntValue.new(val);
		intValues[val] = newInt;
		return newInt;
	}

	def add(args: Range<Value>) -> (Value, bool) {
		def int1 = IntValue.!(args[0]);
		def int2 = IntValue.!(args[1]);
		return (getIntValue(int1.val + int2.val), false);
	}
	def sub(args: Range<Value>) -> (Value, bool) {
		def int1 = IntValue.!(args[0]);
		def int2 = IntValue.!(args[1]);
		return (getIntValue(int1.val - int2.val), false);
	}
	def mul(args: Range<Value>) -> (Value, bool) {
		def int1 = IntValue.!(args[0]);
		def int2 = IntValue.!(args[1]);
		return (getIntValue(int1.val * int2.val), false);
	}
	def div(args: Range<Value>) -> (Value, bool) {
		def int1 = IntValue.!(args[0]);
		def int2 = IntValue.!(args[1]);
		if (int2.val == 0) {
			return (StrValues.getStrValue("arithmetic error: divide by zero"), true);
		} else {
			return (getIntValue(int1.val / int2.val), false);
		}
	}
}

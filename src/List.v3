class ListObject extends Object {
	def list: Vector<Object> = Vector.new();

	def display() -> string {
		def buf = StringBuilder.new();
		buf.putc('[');
		if (list.length > 0) {
			buf.puts(list[0].display());
		}
		for (i = 1; i < list.length; i++) {
			buf.csp();
			buf.puts(list[i].display());
		}
		buf.putc(']');
		return buf.extract();
	}
	def isTrue()  -> bool   { return true; }

	def l_get(idx: IntObject) -> Result {
		if (idx.val < 0 || idx.val >= list.length)
			return Result.Exn(ExnObjects.fromVirgil("list.get", outOfBounds(idx.val, list.length)));
		// XXX cast, discrepancy between allowed index values (i.e. length) and the length of the list
		return Result.OK(list.get(int.!(idx.val)));
	}
 	def l_set(idx: IntObject, obj: Object) -> Result {
		if (idx.val < 0 || idx.val >= list.length)
			return Result.Exn(ExnObjects.fromVirgil("list.set", outOfBounds(idx.val, list.length)));
		list.set(int.!(idx.val), obj);
		return Result.OK(this);
	}
 	def l_put(obj: Object) -> Result {
		list.put(obj);
		return Result.OK(this);
	}
 	def l_length() -> Result {
		return Result.OK(IntObjects.getIntObject(list.length));
	}
 	def l_reverse() -> Result {
		list.reverse();
		return Result.OK(this);
	}
	def l_display() -> Result {
		return Result.OK(StrObjects.fromString(display()));
	}
}

component ListObjects {
	def l_eq = "(lambda (self other) (cond ((!= (other.class) list) false)    ((!= (self.length) (other.length)) false)    (true {      (set i 0)      (while (< i (self.length)) (if (!= (self.get i) (other.get i)) (set i (+ (self.length) 1)) (set i (i.succ))))      (= i (self.length))    })  ))";
	def fromArray(array: Array<Object>) -> ListObject {
		def obj = ListObject.new();
		obj.list.puta(array);
		return obj;
	}
	def fromRange(range: Range<Object>) -> ListObject {
		def obj = ListObject.new();
		obj.list.putr(range);
		return obj;
	}
}

def outOfBounds(len: long, idx: long) => Strings.format2("access at index %d is out of bounds for list of length %d", idx, len);

def main(args: Array<string>) -> int {
	def frame = FrameObjects.newTopFrame();

	loadLib(frame, "lib/core.co"); // AST evaluation

	match (args.length) {
		0 => {
			var scanner = Scanner.new();
			while (true) {
				System.puts("cicero> ");
				var reader = Parser.new("<repl>", scanner.nextLine());
				if (reader.ok) {
					def exprs = reader.getExprs();

					for (expr in exprs) {
						// compile to tier1 bytecode
						if (Tiers.enableTier1) {
							expr.compile([]);
						}

						// evaluate
						frame.evalCode(expr);
						match (frame.result) {
							Exn(exn) => {
								exn.print();
								frame.resetExn();
							}
							OK(val) => System.puts(Strings.format1("=> %s\n", val.display()));
							_       => System.error("eval error", "frame did not give result");
						}
					}
				} else {
					System.puts(Strings.format1("parse error: %s\n", reader.error_msg));
				}
			}
		}
		1 => {
			def file = System.fileLoad(args[0]);
			if (file == null)
				System.error("init error", Strings.format1("unable to load file %s", args[0]));
			var reader = Parser.new(args[0], file);
			if (reader.ok) {
				def exprs = reader.getExprs();

				for (expr in exprs) {
					// compile to tier1 bytecode
					if (Tiers.enableTier1) {
						expr.compile([]);
					}

					// evaluate
					frame.evalCode(expr);
					match (frame.result) {
						Exn(exn) => {
							exn.print();
							return 1;
						}
						OK(val) => System.puts(Strings.format1("=> %s\n", val.display()));
						_       => System.error("eval error", "frame did not give result");
					}
				}
			} else {
				System.puts(reader.fileName);
				System.puts(Strings.format3(":%d:%d: parse error: %s\n", reader.error_line, reader.error_column, reader.error_msg));
				return 1;
			}
			return 0;
		}
		_ => System.error("argument error", "invalid use of program (too many arguments)");
	}
	return 1;
}

// XXX do not expect load lib to fail
def loadLib(frame: FrameObject, filename: string) {
	def file = System.fileLoad(filename);
	if (file == null)
		System.error("init error", "unable to load library");
	def reader = Parser.new(filename, file);
	def exprs = reader.getExprs();
	for (expr in exprs) {
 		if (Tiers.enableTier1) {
 			expr.compile([]);
			// expr.bytecode.inspect();
		}
		frame.evalCode(expr);
	}
}

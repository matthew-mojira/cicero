def main(args: Array<string>) -> int {
	def builtins: Vector<(string, Object)> = Vector.new();
	for (builtin in Builtin.set.all) {
		builtins.put((builtin.id, builtin.val));
	}
	def frame = Frames.newTopFrame(builtins.extract());

	loadLib(frame, "lib/core.co"); // AST evaluation

	match (args.length) {
		0 => {
			var scanner = Scanner.new();
			while (true) {
				System.puts("cicero> ");
				var reader = Parser.new("<repl>", scanner.nextLine());
				if (reader.ok) {
					def exprs = reader.getExprs();

					for (expr in exprs) {
						// compile to tier1 bytecode
						if (Tiers.enableTier1) {
							expr.compile();
// 							def buf = StringBuilder.new();
// 							for (i < expr.bytecode.pos) {
// 								def data = expr.bytecode.data[i];
// 								buf.putx_8(data);
// 							}
// 							System.puts(buf.extract());
// 							System.ln();
// 							Bytecodes.inspect(expr.bytecode.copy());
// 							System.puts("--\n");
						}

						// evaluate
						frame.evalCode(expr);
						if (frame.exn) {
							System.puts(Strings.format1("exception: %s\n", frame.val.display()));
							for (range in frame.stacktrace.extract()) {
								if (range == null) {
									System.puts("  <Virgil code>\n");
								} else {
									System.puts(Strings.format3("  %s:%d:%d\n", range.fileName, range.beginLine, range.endLine));
								}
							}
							frame.exn = false;
						} else {
							System.puts("=> ");
							System.puts(frame.val.display());
							System.ln();
						}
					}
				} else {
					System.puts(Strings.format1("parse error: %s\n", reader.error_msg));
				}
			}
		}
		1 => {
			var reader = Parser.new(args[0], System.fileLoad(args[0]));
			if (reader.ok) {
				def exprs = reader.getExprs();

				for (expr in exprs) {
					// compile to tier1 bytecode
					if (Tiers.enableTier1) {
						expr.compile();
//  						def buf = StringBuilder.new();
//  						for (i < expr.bytecode.pos) {
//  							def data = expr.bytecode.data[i];
//  							buf.putx_8(data);
//  						}
//  						System.puts(buf.extract());
//  						System.ln();
//  						Bytecodes.inspect(expr.bytecode.copy());
//  						System.puts("--\n");
					}

					// evaluate
					frame.evalCode(expr);
					if (frame.exn) {
						System.puts(Strings.format1("exception: %s\n", frame.val.display()));
						for (range in frame.stacktrace.extract()) {
							if (range == null) {
								System.puts("  <Virgil code>\n");
							} else {
								System.puts(Strings.format3("  %s:%d:%d\n", range.fileName, range.beginLine, range.endLine));
							}
						}
						return 1;
					} else {
						System.puts("=> ");
						System.puts(frame.val.display());
						System.ln();
					}
				}
			} else {
				System.puts(reader.fileName);
				System.puts(Strings.format3(":%d:%d: parse error: %s\n", reader.error_line, reader.error_column, reader.error_msg));
				return 1;
			}
			return 0;
		}
		_ => System.error("argument error", "invalid use of program (too many arguments)");
	}
	return 1;
}

// XXX do not expect load lib to fail
def loadLib(frame: Frame, filename: string) {
	def file = System.fileLoad(filename);
	if (file == null)
		System.error("init error", "unable to load library");
	def reader = Parser.new(filename, file);
	def exprs = reader.getExprs();
	for (expr in exprs) {
 		if (Tiers.enableTier1)
 			expr.compile();
		frame.evalCode(expr);
	}
}

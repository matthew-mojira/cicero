def main(args: Array<string>) -> int {
	def opt = getOptions();
	def files = opt.parse(args);
	if (Option<bool>.!(opt.map["help"]).get()) {
		// Show help text option.
		System.puts(Strings.format2("Cicero %s.%d\n", Version.version, Version.minorVersion));
		System.puts(Strings.format1("Build data: %s\n", Version.buildData));
		System.puts("Usage: cicero [options]\n");
		System.puts("Usage: cicero [options] <co files>\n");

		System.puts("\nOptions:\n");
		System.puts("  -help: print this help text\n");
		System.puts("  -tier=0: evaluation tier (0=AST, 1=bytecode)\n");
		System.puts("  -cache=false: use inline cache in tier1 interpreter\n");
		System.puts("  -max-int=int.max: maximum absolute canonicalized int object\n");
		System.puts("  -suppress-output=false: do not print out results of evaluation (useful for benchmarking)\n");
		System.puts("  -repl=false: when files are provided, open repl after evaluation\n");

		return 0;
	}
	Tiers.maxCachedInt = Option<int>.!(opt.map["max-int"]).get();
	match (Option<int>.!(opt.map["tier"]).get()) {
		0 => Tiers.enableTier1 = false;
		1 => {
			Tiers.enableTier1 = true;
			Tiers.enableIC = Option<bool>.!(opt.map["cache"]).get();
		}
		2 => Tiers.enableTier2 = true;
		_ => System.error("arg error", Strings.format1("unrecognized tier: %d", Option<int>.!(opt.map["tier"]).get()));
	}

	def frame = FrameObjects.newTopFrame();

	loadCore(frame);
	
	def output = !Option<bool>.!(opt.map["suppress-output"]).get();

	// evaluate files (if present)
	for (filename in files) {
		// read in file
		def file = System.fileLoad(filename);
		if (file == null) System.error("init error", Strings.format1("unable to load file %s", filename));
		// parse
		var reader = Parser.new(filename, file);
		if (reader.ok) {
			def exprs = reader.getExprs();
			for (expr in exprs) {
				// compile to tier1 bytecode
				if (Tiers.enableTier1) expr.compile([]);
				if (Tiers.enableTier2) expr.compile2([]);

				// evaluate
				frame.evalCode(expr);
				match (frame.result) {
					Exn(exn) => {
						exn.print();
						return 1;
					}
					OK(val) => if (output) System.puts(Strings.format1("=> %s\n", val.display()));
					_       => System.error("eval error", "frame did not give result");
				}
			}
		} else {
			def sb = StringBuilder.new();
// 
// 			for (err in reader.errors.copy()) {
// 				sb.puts(reader.fileName);
// 				sb.put3(":%d:%d: parse error: %s\n", err.0, err.1, err.2);
// 				sb.ln();
// 			}

			sb.puts(reader.fileName);
			sb.put3(":%d:%d: parse error: %s\n", reader.error_line, reader.error_column, reader.error_msg);
			reader.renderCurrentLineWithCaret(sb, reader.error_column);
			sb.ln();

 			System.puts(sb.extract());
			return 1;
		}
	}

	// run repl (if requested)
	if (files.length == 0 || Option<bool>.!(opt.map["repl"]).get()) {
		var scanner = Scanner.new();
		while (true) {
			System.puts("cicero> ");
			var reader = Parser.new("<repl>", scanner.nextLine());
			if (reader.ok) {
				def exprs = reader.getExprs();

				for (expr in exprs) {
					// compile to tier1 bytecode
					if (Tiers.enableTier1) expr.compile([]);
					if (Tiers.enableTier2) expr.compile2([]);

					// evaluate
					frame.evalCode(expr);
					match (frame.result) {
						Exn(exn) => {
							exn.print();
							frame.resetExn();
						}
						OK(val) => System.puts(Strings.format1("=> %s\n", val.display()));
						_       => System.error("eval error", "frame did not give result");
					}
				}
			} else {
				System.puts(Strings.format1("parse error: %s\n", reader.error_msg));
				def sb = StringBuilder.new();
				reader.renderCurrentLineWithCaret(sb, reader.error_column);
				System.puts(sb.extract());
				System.ln();
			}
		}
	}

	if (Profiling.profileBytecode) {
		/* Output Cicero's profiling */
		var i = 0;
		for (op in Opcode.set.all) {
			System.puts(Strings.format2("%s: %d\n", op.name, Profiling.bytecodeMap[i++]));
		}
	}


	return 0;
}

def loadCore(frame: FrameObject) {
	def reader = Parser.new("core", CiceroTexts.core);
	def exprs = reader.getExprs();
	for (expr in exprs) {
 		if (Tiers.enableTier1) {
 			expr.compile([]);
		}
		if (Tiers.enableTier2) expr.compile2([]);
		frame.evalCode(expr);
	}
}

// TODO steal OptionsGroup from virgil or wizard
def getOptions() -> Options {
	def opt = BasicOptions.new(null);

	opt.newBoolOption("help", false);
	opt.newIntOption("tier", 0);
	opt.newIntOption("max-int", int.max);
	opt.newBoolOption("cache", false);
	opt.newBoolOption("repl", false);
	opt.newBoolOption("suppress-output", false);

	return opt;
}

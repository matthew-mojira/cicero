class Object(cls: ClassObject) {
	// who is responsible for initializing fields?
	def var fields: HashMap<string, Object> = Strings.newMap();
	// TODO make sense of built-in fields. For example, one can modify
	// the class of an object by changing the class field, but does that
	// really change the behavior? Should it even be allowed?

	// Builtin objects that are instantiated within the runtime need this
	// constructor to be implemented so that the fields are initialized
	// properly, but it means the field is re-initialized when instantiating
	// objects of a user-defined class
	new() {
		fields["class"] = cls;
	}

	def getField(name: string) -> Maybe<Object> {
		if (fields.has(name)) return Maybe.Just(fields[name]);
		// Methods are lazily bound, that is, they are not initialized until
		// it is requested for the first time.
 		for (clazz = this.cls; clazz != null; clazz = clazz.superclass) {
			// System.puts(clazz.name);
			// System.puts(": ");
 			for (func in clazz.classMethods) {
				// System.puts(func.id);
				// System.puts(" ");
 				if (Strings.equal(func.id, name)) {
 					def m = MethodObject.new(this, func.id, func.params, func.code);
 					fields[name] = m;
 					return Maybe.Just(m);
 				}
 			}
			System.ln();
 		}
		return Maybe.Nothing;
	}

	def instanceOf(otherCls: ClassObject) -> bool {
		// System.puts(Strings.format1("This class is %s\n", this.cls.name));
		// System.puts(Strings.format1("That class is %s\n", otherCls.name));
 		for (clazz = this.cls; clazz != null; clazz = clazz.superclass) {
			// System.puts(Strings.format2("-> compare: %s == %s\n", clazz.name, otherCls.name));
			if (clazz == otherCls) {
				// System.puts("true\n");
				return true;
			}
		}
		// System.puts("false\n");
		return false;
	}

	def display() -> string;
	def isTrue() -> bool;

}

component Objects {
	def classBase = ClassObject.new("base", null,
			// init
			CodeObjects.fromVirgil(o_init),
			// fields
			[("class", CodeObjects.virgilPoopCrap)],
			// methods
			[FuncObjects.fromVirgil("fields", [], o_fields),
			 FuncObjects.fromVirgil("display", [], o_display)]
			);
}

def o_init(args: Range<Object>) -> (Object, bool) {
	def obj = args[0];
	obj.fields["class"] = obj.cls;
	return (PoopCrapObjects.instance, false);
}

def o_fields(args: Range<Object>) -> (Object, bool) {
	def obj = args[0];
	def list = ListObject.new();
	def fList = Maps.keyList(obj.fields);
	// FIXME add lazy fields
	Lists.apply(fList, putList(list, _));
	return (list, false);
}

def putList(list: ListObject, str: string) {
	def obj = StrObjects.getStrObject(str);
	list.list.put(obj);
}

def o_display(args: Range<Object>) -> (Object, bool) {
	def obj = args[0];
	return (StrObjects.getStrObject(obj.display()), false);
}

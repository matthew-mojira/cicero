enum Opcode(fallthrough: bool, jump: bool) {
	NOP               (true, false),
	// Loads
	LOAD_CONST        (true, false),  // [0] index into the constant pool
	LOAD_GLOBAL       (true, false),  // [0] index into the string pool
	LOAD_LOCAL        (true, false),  // [0] index into the runtime locals
	LOAD_FIELD        (true, false),  // [1] index into the string pool
	LOAD_NONLOCAL     (true, false),  // [1] index into the nonlocal variables
	// Stores
	STORE_GLOBAL      (true, false),  // [1] index into the string pool
	STORE_LOCAL       (true, false),  // [0] index into the runtime locals
	STORE_FIELD       (true, false),  // [2] index into the string pool
	// Control flow
	CALL              (true, false),  // [n] number of arguments (not including function!)
	JUMP              (false, true),  // [0] offset of pc
	JUMP_IF_FALSE     (true, true),   // [1] offset of pc
	JUMP_IF_TRUE_PEEK (true, true),   // [1] offset of pc
	JUMP_IF_FALSE_PEEK(true, true),   // [1] offset of pc
	// Exceptions
	RAISE             (false, false), // [1]
	TRY               (true, false),  // [0] offset from this bytecode of the catch
	CATCH             (true, false),  // [0]
	ASSERT_FUNC       (true, false),  // [1]
	// Object creation
	CREATE_OBJECT     (true, false),  // [1]
	CREATE_CLASS      (true, false),  // [1] index into the classhole pool
	CREATE_LIST       (true, false),  // [1] how many elements to pull
	CREATE_FUNC       (true, false),  // [n] index into the funchole pool
	// Stack manipulation
	POP               (true, false),  // [1] how many values to pull
	DUPE              (true, false),  // index of element to dupe to top of stack (0 = top)
	SWAP              (true, false)   // index of element to swap top of stack with (0 = top)
}

/*
 * 00 NOP
 * 01 LOAD_CONST  
 * 02 LOAD_GLOBAL 
 * 03 LOAD_LOCAL  
 * 04 LOAD_FIELD  
 * 05 LOAD_NONLOCAL
 * 06 STORE_GLOBAL
 * 07 STORE_LOCAL 
 * 08 STORE_FIELD 
 * 09 CALL        
 * 0A JUMP        
 * 0B JUMP_IF_FALSE
 * 0C JUMP_IF_TRUE_PEEK
 * 0D JUMP_IF_FALSE_PEEK
 * 0E RAISE      
 * 0F TRY        
 * 10 CATCH      
 * 11 ASSERT_FUNC 
 * 12 CREATE_OBJECT
 * 13 CREATE_CLASS 
 * 14 CREATE_LIST  
 * 15 CREATE_FUNC  
 * 16 POP
 * 17 DUPE
 * 18 SWAP
 */

component Opcodes {
	def numOpcodes: int = 25;
	def map: Array<Opcode> = Array.new(numOpcodes); // XXX update this with the number of opcodes
}

def nothing() -> int {
	for (op in Opcode) {
		Opcodes.map[op.tag] = op;
	}
	return 1;
}
def nothing2 = nothing();

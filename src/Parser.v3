enum Keyword(id: string) {
	IF("if"),
	COND("cond"),
	WHILE("while"),
	AND("and"),
	OR("or"),
	BEGIN("begin"),
	FUNC("func"),
	LAMBDA("lambda"),
	SET("set"),
	SET_GLOBAL("set-global"),
	GET_GLOBAL("get-global"),
	GET_FIELD("get-field"),
	SET_FIELD("set-field"),
	CLASS("class"),
	NEW("new"),
	RAISE("raise"),
	TRY("try")
}

enum ClassKeyword(id: string) {
	EXTENDS("extends"),
	INIT("init"),
	FIELD("field"),
	METHOD("method")
}

component ParseOption {
	def allowMissingElse: bool = false;
	//def allowEmptyBegin: bool  = false;
}

def missingCloseParentheses: string = "expected closing parentheses but reached end of file";
def duplicatedParameter: string     = "parameter redefined";
def duplicatedFieldMethod: string   = "field/method redefined";
def duplicatedExtends: string       = "extends clause defined";
def duplicatedInit: string          = "init clause defined";

class Vars {
	def referencedVars: HashMap<string, Box<AccessMode>> = Strings.newMap();
	def possibleNonlocals: Vector<(ASTData.Func, Array<(string, Box<AccessMode>)>)> = Vector.new();
}

class Parser extends TextReader {
	private def exprs: Vector<CodeObject>          = Vector.new();
	def errors: Vector<(int, int, string)> = Vector.new();

	new(fileName: string, data: string) super(fileName, data) {
		skipWs = skipWhitespaceAndComments;
	   onError = fun (x: TextReader, a: int, b: int, c: string) => Parser.!(x).addError(a, b, c);

		skipWs(this);
		while (pos < limit) {
			skipWs(this);
			// readExpr is intentional. The top-level doesn't get value on the
			// varStack to indicate that all accesses here are on global variables
			def expr = readExpr();
			if (!ok) break;
			exprs.put(CodeObjects.fromAST(expr));
		}
	}

	def varStack: ArrayStack<Vars> = ArrayStack.new();
	// all global-set/gets use this to reduce allocations. Don't mutate this
	def global:   Box<AccessMode> = Box.new(AccessMode.Global);

	                                             /* AST,  globals (which may be nonlocals) */
	private def readCode(locals: Array<string>) -> (AST, Array<(string, Box<AccessMode>)>) {
		def top = Vars.new();
		for (local in locals) {
			top.referencedVars[local] = Box.new(AccessMode.Local);
		}
		varStack.push(top);

		def expr = readExpr();

		// HERE: set the nonlocal modes from the enclosed functions
		for (i < top.possibleNonlocals.length) {
			def p = top.possibleNonlocals[i];
			def fn = p.0, poss = p.1;

			//System.puts(Strings.format1("Determining nonlocals for enclosed '%s':\n", fn.id));

			for (i < poss.length) {
				def p = poss[i];
				def id = p.0, acc = p.1;
				//System.puts(Strings.format1("  testing '%s': ", id));
				if (top.referencedVars.has(id) && top.referencedVars[id].data == AccessMode.Local) {
					//System.puts("NONLOCAL\n");
					acc.data = AccessMode.Nonlocal;
					fn.nonlocals.put(id); // XXX is this unique?
				} else {
					//System.puts("NO\n");
				}
			}
		}

		varStack.pop();

		// of the remaining variables, keep the ones that are global, so could be nonlocal in the enclosing scope
		def globals: Vector<(string, Box<AccessMode>)> = Vector.new();
		for (list = Maps.keyList(top.referencedVars); list != null; list = list.tail) {
			def key = list.head;
			if (top.referencedVars[key].data == AccessMode.Global) {
				globals.put((key, top.referencedVars[key]));
			}
		}
		return (expr, globals.extract());
	}


	private def readExpr() -> AST {
		def startPos = pos;
		def startLine = line, startColumn = column;
		match (char) {
			'(' => {
				// consume matched token
				req1('(');
				
				// check for unit
				if (opt1(')') >= 0) {
					return AST.new(ASTData.Lit(PoopCrapObjects.instance), FileRange.new(fileName, startLine, startColumn, line, column));
				}

				// check for keyword
				def kw = readKeyword();

				// no keyword
				if (kw.isNothing()) {
					def head: AST = readExpr();
					def tail: Vector<AST> = Vector.new();
					while (opt1(')') < 0) {
						def expr = readExpr();
						tail.put(expr);

						if (pos >= limit) {
							failRel(startPos - pos, missingCloseParentheses);
							return null;
						}
					}
					return AST.new(ASTData.Apply(head, tail.extract()),
						FileRange.new(fileName, startLine, startColumn, line, column));
				}

				def str = kw.fromJust();
				match (str) {
					IF => {
						def cond = readExpr();
						def exprT = readExpr();
						var exprF: AST;
						if (ParseOption.allowMissingElse && opt1(')') >= 0) {
								exprF = AST.new(ASTData.Lit(PoopCrapObjects.instance), null);
						} else {
							exprF = readExpr();
							req1(')');
						}

						return AST.new(ASTData.If(cond, exprT, exprF),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					COND => {
						def cases: Vector<(AST, AST)> = Vector.new();
						while (opt1(')') < 0) {
							req1('(');
							def fst = readExpr();
							def snd = readExpr();
							req1(')');
							cases.put((fst, snd));
							
							if (pos >= limit) {
								failRel(startPos - pos, missingCloseParentheses);
								return null;
							}
						}

						return AST.new(ASTData.Cond(cases.extract()),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					WHILE => {
						def cond = readExpr();
						def body = readExpr();
						req1(')');
						
						return AST.new(ASTData.While(cond, body),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					AND => {
						def left = readExpr();
						def right = readExpr();
						req1(')');

						return AST.new(ASTData.And(left, right),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					OR => {
						def left = readExpr();
						def right = readExpr();
						req1(')');

						return AST.new(ASTData.Or(left, right),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					BEGIN => {
						def exprs: Vector<AST> = Vector.new();
						def fst = readExpr();
						exprs.put(fst);

						while (opt1(')') < 0) {
							def expr = readExpr();
							exprs.put(expr);

							if (pos >= limit) {
								failRel(startPos - pos, missingCloseParentheses);
								return null;
							}
						}
						
						return AST.new(ASTData.Begin(exprs.extract()),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					FUNC => {
						req1('(');
						// name of function
						def name = readIdentifier();
						// params to function
						def params: Vector<string> = Vector<string>.new();
						while (opt1(')') < 0) {
							def param = readIdentifier();
							// check param
							if (contains(params, param)) fail(duplicatedParameter); // XXX fail but do not stop parsing

							params.put(param);

							if (pos >= limit) {
								failRel(startPos - pos, missingCloseParentheses);
								return null;
							}
						}
						
						// body expresssion
						def ret = readCode(params.copy());
						def body = ret.0, prev = ret.1;
						req1(')');

						def b = bindLocal(name);
						def range = FileRange.new(fileName, startLine, startColumn, line, column);

						// get func to the set of possible nonlocals
						// XXX creating CodeObject here
						def func = ASTData.Func(name, params.extract(), CodeObjects.fromAST(body), Vector.new());
						def vars = varStack.peek();
						if (vars != null) {
							vars.possibleNonlocals.put((func, prev));
						}
						
						return AST.new(ASTData.VarSet(name, b, AST.new(func, range)), 
										range);
					}
					LAMBDA => {
						req1('(');
						// params to function
						def params: Vector<string> = Vector<string>.new();
						while (opt1(')') < 0) {
							def param = readIdentifier();
							// check param
							if (contains(params, param)) fail(duplicatedParameter); // XXX fail but do not stop parsing
							params.put(param);

							if (pos >= limit) {
								failRel(startPos - pos, missingCloseParentheses);
								return null;
							}
						}
						
						// body expresssion
						def ret = readCode(params.copy());
						def body = ret.0, prev = ret.1;
						req1(')');

						def range = FileRange.new(fileName, startLine, startColumn, line, column);
						
						// get func to the set of possible nonlocals
						// XXX creating CodeObject here
						def func = ASTData.Func("lambda", params.extract(), CodeObjects.fromAST(body), Vector.new());
						def vars = varStack.peek();
						if (vars != null) {
							vars.possibleNonlocals.put((func, prev));
						}
						
						return AST.new(func, range);
					}
					SET => {
						def id = readIdentifier();
						def expr = readExpr();
						req1(')');

						// VarSet: local or global?
						def b = bindLocal(id);

						return AST.new(ASTData.VarSet(id, b, expr),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					SET_GLOBAL => {
						def id = readIdentifier();
						def val = readExpr();
						req1(')');

						return AST.new(ASTData.VarSet(id, global, val),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					GET_GLOBAL => {
						def id = readIdentifier();
						req1(')');

						return AST.new(ASTData.VarGet(id, global),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					SET_FIELD => {
						def field = readIdentifier();
						def obj = readExpr();
						def val = readExpr();
						req1(')');

						return AST.new(ASTData.SetField(field, obj, val),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					GET_FIELD => {
						def field = readIdentifier();
						def obj = readExpr();
						req1(')');

						return AST.new(ASTData.GetField(field, obj),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					CLASS => {
						def name = readIdentifier();
						def fields: Vector<(string, CodeObject)> = Vector.new();
						def methods: Vector<ASTData.Func> = Vector.new();
						var init: Maybe<CodeObject> = Maybe.Nothing;
						var superclass: Maybe<AST> = Maybe.Nothing;

						while (opt1(')') < 0) {
							req1('(');
							
							def kw = readClassKeyword();
							
							if (kw.isNothing()) {
								fail("unrecognized construct in class definition");
								return null;
							}

							match (kw.fromJust()) {
								EXTENDS => {
									if (superclass.isJust()) {
										fail(duplicatedExtends);
										// XXX fail but keep parsing
									}
									superclass = Maybe.Just(readExpr());
								}
								INIT => {
									if (init.isJust()) {
										fail(duplicatedInit);
										// XXX fail but keep parsing
									}
									init = Maybe.Just(CodeObjects.fromAST(readCode(["self"]).0)); // XXX ignoring .1
								}
								FIELD => {
									def fieldName = readIdentifier();
									def fieldInit = readCode(["self"]).0; // XXX ignoring .1
									
									fields.put(fieldName, CodeObjects.fromAST(fieldInit));
								}
								METHOD => {
									req1('(');
									def methodName = readIdentifier();
									def methodParams = Vector<string>.new();
									methodParams.put("self");
									
									while (opt1(')') < 0) {
										def paramName = readIdentifier();
										// check param
										if (contains(methodParams, paramName)) fail(duplicatedParameter); // XXX fail but do not stop parsing
										methodParams.put(paramName);

										if (pos >= limit) {
											failRel(startPos - pos, missingCloseParentheses);
											return null;
										}
									}
									def methodBody = readCode(methodParams.copy()).0; // XXX ignoring .1

									// XXX creating CodeObject here
									methods.put(ASTData.Func(methodName, 
												Ranges.dup(methodParams.copy()[1 ...]), 
												CodeObjects.fromAST(methodBody), Vector.new()));
								}
							}
							req1(')');

							if (pos >= limit) {
								failRel(startPos - pos, missingCloseParentheses);
								return null;
							}
						}

						def b = bindLocal(name);
						def range = FileRange.new(fileName, startLine, startColumn, line, column);
						
						// XXX creating CodeObject here
						return AST.new(ASTData.VarSet(name, b,
															AST.new(ASTData.Class(name, superclass, init, fields.extract(), methods.extract()), range)),
										range);
					}
					NEW => {
						def expr = readExpr();
						req1(')');
						return AST.new(ASTData.New(expr),
								FileRange.new(fileName, startLine, startColumn, line, column));
					}
					RAISE => {
						def exn = readExpr();
						req1(')');

						return AST.new(ASTData.Raise(exn),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
					TRY => {
						def try = readExpr();
						def exn = readIdentifier();
						def catch = readExpr();
						req1(')');
						
						// make the exception variable a local
						def b = bindLocal(exn);

						return AST.new(ASTData.Catch(try, exn, b, catch),
							FileRange.new(fileName, startLine, startColumn, line, column));
					}
				}
			}
			')' => {
				fail("misplaced closing parentheses");
				return null;
			}
			// { } is a shortcut for `begin`
			'{' => {
				req1('{');

				def exprs: Vector<AST> = Vector.new();
				// ensure non-empty
				def e = readExpr();
				exprs.put(e);
				while (opt1('}') < 0) {
					def expr = readExpr();
					exprs.put(expr);

					if (pos >= limit) {
						failRel(startPos - pos, "unmatched opening brace");
						return null;
					}
				}
				return AST.new(ASTData.Begin(exprs.extract()),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			'}' => {
				fail("unmatched closing brace");
				return null;
			}
			// list literals
			'[' => {
				req1('[');

				def exprs: Vector<AST> = Vector.new();
				while (opt1(']') < 0) {
					def expr = readExpr();
					exprs.put(expr);

					if (pos >= limit) {
						failRel(startPos - pos, "unmatched opening bracket");
						return null;
					}
				}
				return AST.new(ASTData.List(exprs.extract()),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			']' => {
				fail("unmatched closing bracket");
				return null;
			}
			'\"' => {
				def str = readString();
				return AST.new(ASTData.Lit(StrObjects.getStrObject(str)),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			_ => {
				// this is an identifier
				def strs = readQualifiedName();
				def range = FileRange.new(fileName, startLine, startColumn, line, column);
				var expr: AST;

				// parse first identifier for decimal integer literal
				def str = strs[0];
				// TODO implement parsing big ints
				def res = Ints.parseDecimal(str, 0);
				def status = res.0, value = res.1;
				if (status > 0) {
					if (status != str.length) {
//						System.puts(Strings.format3("string is \"%s\", found %d characters and length is %d\n",
//									str, status, str.length));
						fail("trailing information after integer literal");
						return null;
					}
					// any characters that start an integer literal cannot be part of a valid identifier
					expr = AST.new(ASTData.Lit(IntObjects.fromLong(value)), range);
				} else {
					// VarGet: local or global?
					var b: Box<AccessMode>;

					def map = varStack.peek();
					if (map == null) {
						b = global;
					} else if (map.referencedVars.has(str)) {
						b = map.referencedVars[str];
					} else {
						b = Box.new(AccessMode.Global);
						map.referencedVars[str] = b;
					}
					expr = AST.new(ASTData.VarGet(str, b), range);
				}

				// remaining strings are field accesses
				for (i = 1; i < strs.length; i++) {
					expr = AST.new(ASTData.GetField(strs[i], expr), range);
				}

				return expr;
			}
		}
	}

	private def readString() -> string {
		def a = Strings.parseLiteral(data, pos);
		def chars = a.0, str = a.1;
		if (chars < 0) {
			fail("malformed string literal");
			return null;
		}
		advance(chars);
		return str;
	}

	private def readQualifiedName() -> Array<string> {
		def len = plus_rel(0, isFullQualCharacter) - pos;
		if (len < 0) {
			fail("invalid character in identifier name");
			return null;
		}
		def str = readToken(len).image;
		return Strings.split(str, ".", -1);
	}

	private def readIdentifier() -> string {
		def len = plus_rel(0, isIdentCharacter) - pos;
		if (len < 0) {
			fail("invalid character in identifier name");
			return null;
		}
		def str = readToken(len).image;
		return str;
	}
	
	/* this reads a keyword, returning the keyword found and consuming it
	 * returns null if no keyword is found (should not consume anything)
	 */
	private def readKeyword() -> Maybe<Keyword> {
		def len = plus_rel(0, isIdentCharacter) - pos;
		if (len < 0) {
			return Maybe.Nothing;
		}
		// not a keyword if it is part of a qualified string
		if (peekRel(len) == '.') return Maybe.Nothing;
	
		// check in list of keywords
		for (kw in Keyword.set.all) {
			def str = kw.id;

			// check length first
			if (str.length != len) continue;
			
			var matched: bool = true;
			for (i < str.length) {
				if (str[i] != peekRel(i)) matched = false;
			}
			// found: consume the keyword
			if (matched) {
				reqN(str);
				return Maybe.Just(kw);
			}
		}

		return Maybe.Nothing;
	}

	private def readClassKeyword() -> Maybe<ClassKeyword> {
		def len = plus_rel(0, isIdentCharacter) - pos;
		if (len < 0) {
			return Maybe.Nothing;
		}
		// not a keyword if it is part of a qualified string
		if (peekRel(len) == '.') return Maybe.Nothing;
	
		// check in list of keywords
		for (kw in ClassKeyword.set.all) {
			def str = kw.id;

			// check length first
			if (str.length != len) continue;
			
			var matched: bool = true;
			for (i < str.length) {
				if (str[i] != peekRel(i)) matched = false;
			}
			// found: consume the keyword
			if (matched) {
				reqN(str);
				return Maybe.Just(kw);
			}
		}
		return Maybe.Nothing;
	}


	private def bindLocal(name: string) -> Box<AccessMode> {
		var b: Box<AccessMode>;

		def map = varStack.peek();
		if (map == null) {
			b = global;
		} else if (map.referencedVars.has(name)) {
			b = map.referencedVars[name];
			b.data = AccessMode.Local; // set forces local accesses everywhere
		} else {
			b = Box.new(AccessMode.Local);
			map.referencedVars[name] = b;
		}
		return b;
	}

	def addError(eline: int, ecol: int, msg: string) {
		// use previous callback anyway
		setFirstError(eline, ecol, msg);

		//def sb = StringBuilder.new();
 		//sb.puts(fileName);
 		//sb.put3(":%d:%d: parse error: %s\n", eline, ecol, msg);
		//renderCurrentLineWithCaret(sb, ecol);
		//sb.ln();
		//System.puts(sb.extract());
	}

	def getExprs() -> Array<CodeObject> {
		return exprs.extract();
	}
}

def isIdentCharacter(ch: byte) -> bool {
	match (ch) {
		' ', '\t', '\n', '\'', '\"', '(', ')', '[', ']', ';', '.' => return false;
		_ => return true;
	}
}

def isFullQualCharacter(ch: byte) -> bool {
	match (ch) {
		' ', '\t', '\n', '\'', '\"', '(', ')', '[', ']', ';' => return false;
		_ => return true;
	}
}

def skipWhitespaceAndComments(tr: TextReader) {
	var pos = tr.pos, line = tr.line, column = tr.column;
	var data = tr.data, max = tr.limit;
	var comment = false;
	while (pos < max) {
		var ch = data[pos];
		match (ch) {
			';' => {
				comment = true;
				column++;
			}
			' ' => column++;
			'\t' => column = tr.nextTabStop(column);
			'\n' => {
				tr.lineEnds.put(pos);
				column = 1;
				line++;
				comment = false;
			}
			_ => if (!comment) break; // not whitespace
		}
		pos++;
	}
	// reached the end or a non-whitespace byte
	tr.at(pos, line, column);
}

def contains(vec: Vector<string>, str: string) -> bool {
  for (i < vec.length) {
	  if (Strings.equal(vec[i], str)) return true;
  }
  return false;
}

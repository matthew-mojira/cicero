class Parser extends TextReader {
	private def exprs: Vector<CodeObject> = Vector<CodeObject>.new();

	new(fileName: string, data: string) super(fileName, data) {
		skipWs = skipWhitespaceAndComments;

		skipWs(this);
		while (pos < limit) {
			skipWs(this);
			// readExpr is intentional. The top-level doesn't get value on the
			// varStack to indicate that all accesses here are on global variables
			def expr = readExpr();
			if (!ok) break;
			exprs.put(CodeObjects.fromAST(expr));
		}
	}

	// Box is a pointer to an access mode, so we can retroactively change
	// access modes when a set is encountered, but also so we need only a
	// single pass to parse the program.
	def varStack: ArrayStack<HashMap<string, Box<AccessMode>>> = ArrayStack.new();
	// all global-set/gets use this to reduce allocations. Don't mutate this
	def global:   Box<AccessMode> = Box.new(AccessMode.Global);

	private def readCode(locals: Array<string>) -> AST {
		def map: HashMap<string, Box<AccessMode>> = Strings.newMap();
		varStack.push(map);

		for (local in locals) {
			map[local] = Box.new(AccessMode.Local);
		}

		def expr = readExpr();

		varStack.pop();
		return expr;
	}


	private def readExpr() -> AST {
		def startPos = pos;
		def startLine = line, startColumn = column;
		match (char) {
			'(' => {
				req1('(');
				if (opt1(')') >= 0) {
					// () case
					return AST.new(ASTData.Lit(PoopCrapObjects.instance), FileRange.new(fileName, startLine, startColumn, line, column));
				}

				// check first word to indicate KW-syntax expression
				def head = readExpr();

				// XXX A keyword is allowed to be used anywhere. It only takes on special
				// meaning if it appears as the first identifier in a list.
				match (head.data) {
					VarGet(str, _) => {
						// check if this is a keyword
						if (Strings.equal(str, "if")) {
							def cond = readExpr();
							def exprT = readExpr();
							def exprF = readExpr();
							req1(')');

							return AST.new(ASTData.If(cond, exprT, exprF),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "raise")) {
							def exn = readExpr();
							req1(')');

							return AST.new(ASTData.Raise(exn),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "try")) {
							def try = readExpr();
							def exn = readIdentifier();
							def catch = readExpr();
							req1(')');
							
							// make the exception variable a local
							def b = bindLocal(exn);

							return AST.new(ASTData.Catch(try, exn, b, catch),
								FileRange.new(fileName, startLine, startColumn, line, column));

						/* functions and lambdas */
						} else if (Strings.equal(str, "func")) {
							/* The syntax of a function is
							 *   (func (f x y z)
							 *      <expr>
							 *   )
							 */
							req1('(');
							// name of function
							def name = readIdentifier();
							// params to function
							def params: Vector<string> = Vector<string>.new();
							while (opt1(')') < 0) {
								def param = readIdentifier();
								params.put(param);

								if (pos >= limit) {
									failRel(startPos - pos, "unmatched opening parentheses");
									return null;
								}
							}
							
							// body expresssion
							def body = readCode(params.copy());
							req1(')');

							def b = bindLocal(name);
							def range = FileRange.new(fileName, startLine, startColumn, line, column);
							
							// XXX creating CodeObject here
							return AST.new(ASTData.VarSet(name, b,
										                  AST.new(ASTData.Func(name, params.extract(), CodeObjects.fromAST(body)), range)), 
										   range);
						} else if (Strings.equal(str, "lambda")) {
							/* lambdas */
							req1('(');
							// params to function
							def params: Vector<string> = Vector<string>.new();
							while (opt1(')') < 0) {
								def param = readIdentifier();
								params.put(param);

								if (pos >= limit) {
									failRel(startPos - pos, "unmatched opening parentheses");
									return null;
								}
							}
							
							// body expresssion
							def body = readCode(params.copy());
							req1(')');

							def range = FileRange.new(fileName, startLine, startColumn, line, column);
							
							// XXX creating CodeObject here
							return AST.new(ASTData.Func("lambda", params.extract(), CodeObjects.fromAST(body)), range);
						} else if (Strings.equal(str, "set")) {
							def id = readIdentifier();
							def expr = readExpr();
							req1(')');

							// VarSet: local or global?
							def b = bindLocal(id);

							return AST.new(ASTData.VarSet(id, b, expr),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "cond")) {
							def cases: Vector<(AST, AST)> = Vector.new();
							while (opt1(')') < 0) {
								req1('(');
								def fst = readExpr();
								def snd = readExpr();
								req1(')');
								cases.put((fst, snd));
								
								if (pos >= limit) {
									failRel(startPos - pos, "unmatched opening parentheses");
									return null;
								}
							}

							return AST.new(ASTData.Cond(cases.extract()),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "while")) {
							def cond = readExpr();
							def body = readExpr();
							req1(')');
							
							return AST.new(ASTData.While(cond, body),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "begin")) { // also has a sugary version
							def exprs: Vector<AST> = Vector.new();
							// begin must not be non-empty
							// TODO this does not print a nice error message if it fails
							def fst = readExpr();
							exprs.put(fst);

							while (opt1(')') < 0) {
								def expr = readExpr();
								exprs.put(expr);

								if (pos >= limit) {
									failRel(startPos - pos, "unmatched opening parentheses");
									return null;
								}
							}
							
							return AST.new(ASTData.Begin(exprs.extract()),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "get-field")) { // also has a sugary version
							def field = readIdentifier();
							def obj = readExpr();
							req1(')');

							return AST.new(ASTData.GetField(field, obj),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "set-field")) {
							def field = readIdentifier();
							def obj = readExpr();
							def val = readExpr();
							req1(')');

							return AST.new(ASTData.SetField(field, obj, val),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "get-global")) {
							def id = readIdentifier();
							req1(')');

							return AST.new(ASTData.VarGet(id, global),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "set-global")) {
							def id = readIdentifier();
							def val = readExpr();
							req1(')');

							return AST.new(ASTData.VarSet(id, global, val),
								FileRange.new(fileName, startLine, startColumn, line, column));
						} else if (Strings.equal(str, "class")) {
							def name = readIdentifier();
							def fields: Vector<(string, CodeObject)> = Vector.new();
							def methods: Vector<ASTData.Func> = Vector.new();
							var init: Maybe<CodeObject> = Maybe.Nothing;
							var superclass: Maybe<AST> = Maybe.Nothing;

							while (opt1(')') < 0) {
								req1('(');
								def word = readIdentifier();
								if (Strings.equal(word, "field")) {
									def fieldName = readIdentifier();
									def fieldInit = readCode(["self"]);
									
									fields.put(fieldName, CodeObjects.fromAST(fieldInit));
								} else if (Strings.equal(word, "method")) {
									req1('(');
									def methodName = readIdentifier();
									def methodParams = Vector<string>.new();
									
									while (opt1(')') < 0) {
										def paramName = readIdentifier();
										methodParams.put(paramName);

										if (pos >= limit) {
											failRel(startPos - pos, "unmatched opening parentheses");
											return null;
										}
									}
									def methodSelfParams = Array<string>.new(methodParams.length + 1);
									for (i < methodSelfParams.length) {
										if (i == 0) {
											methodSelfParams[i] = "self";
										} else {
											methodSelfParams[i] = methodParams[i - 1];
										}
									}
									def methodBody = readCode(methodSelfParams);
									// FIXME null check exception when method has no body

									// XXX creating CodeObject here
									methods.put(ASTData.Func(methodName, methodParams.extract(), CodeObjects.fromAST(methodBody)));
								} else if (Strings.equal(word, "init")) {
									if (init.isJust()) {
										fail("redeclaration of init in class definition");
										return null;
									}
									init = Maybe.Just(CodeObjects.fromAST(readCode([])));
								} else if (Strings.equal(word, "extends")) {
									if (init.isJust()) {
										fail("redeclaration of extends in class definition");
										return null;
									}
									superclass = Maybe.Just(readExpr());
								} else {
									fail(Strings.format1("unrecognized attribute of class declaration: %s", word));
									return null;
								}
								req1(')');

								if (pos >= limit) {
									failRel(startPos - pos, "unmatched opening parentheses");
									return null;
								}
							}

							def b = bindLocal(name);
							def range = FileRange.new(fileName, startLine, startColumn, line, column);
							
							// XXX creating CodeObject here
							return AST.new(ASTData.VarSet(name, b,
										                  AST.new(ASTData.Class(name, superclass, init, fields.extract(), methods.extract()), range)),
										   range);
						} else if (Strings.equal(str, "new")) {
							def expr = readExpr();
							req1(')');

							return AST.new(ASTData.New(expr),
								FileRange.new(fileName, startLine, startColumn, line, column));
						}
					}
					_ => ;
				}
				def tail: Vector<AST> = Vector.new();
				while (opt1(')') < 0) {
					def expr = readExpr();
					tail.put(expr);

					if (pos >= limit) {
						failRel(startPos - pos, "unmatched opening parentheses");
						return null;
					}
				}
				return AST.new(ASTData.Apply(head, tail.extract()),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			')' => {
				fail("unmatched closing parentheses");
				return null;
			}
			// { } is a shortcut for `begin`
			'{' => {
				req1('{');

				def exprs: Vector<AST> = Vector.new();
				// ensure non-empty
				def e = readExpr();
				exprs.put(e);
				while (opt1('}') < 0) {
					def expr = readExpr();
					exprs.put(expr);

					if (pos >= limit) {
						failRel(startPos - pos, "unmatched opening brace");
						return null;
					}
				}
				return AST.new(ASTData.Begin(exprs.extract()),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			'}' => {
				fail("unmatched closing brace");
				return null;
			}
			// list literals
			'[' => {
				req1('[');

				def exprs: Vector<AST> = Vector.new();
				while (opt1(']') < 0) {
					def expr = readExpr();
					exprs.put(expr);

					if (pos >= limit) {
						failRel(startPos - pos, "unmatched opening bracket");
						return null;
					}
				}
				return AST.new(ASTData.List(exprs.extract()),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			']' => {
				fail("unmatched closing bracket");
				return null;
			}
			'\"' => {
				def str = readString();
				return AST.new(ASTData.Lit(StrObjects.getStrObject(str)),
					FileRange.new(fileName, startLine, startColumn, line, column));
			}
			_ => {
				// this is an identifier
				def strs = readQualifiedName();
				def range = FileRange.new(fileName, startLine, startColumn, line, column);
				var expr: AST;

				// parse first identifier for decimal integer literal
				def str = strs[0];
				def res = Ints.parseDecimal(str, 0);
				def status = res.0, value = res.1;
				if (status > 0) {
					if (status != str.length) {
//						System.puts(Strings.format3("string is \"%s\", found %d characters and length is %d\n",
//									str, status, str.length));
						fail("trailing information after integer literal");
						return null;
					}
					// any characters that start an integer literal cannot be part of a valid identifier
					expr = AST.new(ASTData.Lit(IntObjects.getIntObject(value)), range);
				} else {
					// VarGet: local or global?
					var b: Box<AccessMode>;

					def map = varStack.peek();
					if (map == null) {
						b = global;
					} else if (map.has(str)) {
						b = map[str];
					} else {
						b = Box.new(AccessMode.Global);
						map[str] = b;
					}
					expr = AST.new(ASTData.VarGet(str, b), range);
				}

				// remaining strings are field accesses
				for (i = 1; i < strs.length; i++) {
					expr = AST.new(ASTData.GetField(strs[i], expr), range);
				}

				return expr;
			}
		}
	}

	private def readString() -> string {
		def a = Strings.parseLiteral(data, pos);
		def chars = a.0, str = a.1;
		if (chars < 0) {
			fail("malformed string literal");
			return null;
		}
		advance(chars);
		return str;
	}

	private def readQualifiedName() -> Array<string> {
		def len = plus_rel(0, isFullQualCharacter) - pos;
		if (len < 0) {
			fail("invalid character in identifier name");
			return null;
		}
		def str = readToken(len).image;
		return Strings.split(str, ".", -1);
	}

	private def readIdentifier() -> string {
		def len = plus_rel(0, isIdentCharacter) - pos;
		if (len < 0) {
			fail("invalid character in identifier name");
			return null;
		}
		def str = readToken(len).image;
		return str;
	}

	private def bindLocal(name: string) -> Box<AccessMode> {
		var b: Box<AccessMode>;

		def map = varStack.peek();
		if (map == null) {
			b = global;
		} else if (map.has(name)) {
			b = map[name];
			b.data = AccessMode.Local; // set forces local accesses everywhere
		} else {
			b = Box.new(AccessMode.Local);
			map[name] = b;
		}
		return b;
	}


	def getExprs() -> Array<CodeObject> {
		return exprs.extract();
	}
}

def isIdentCharacter(ch: byte) -> bool {
	match (ch) {
		' ', '\t', '\n', '\'', '\"', '(', ')', '[', ']', ';', '.' => return false;
		_ => return true;
	}
}

def isFullQualCharacter(ch: byte) -> bool {
	match (ch) {
		' ', '\t', '\n', '\'', '\"', '(', ')', '[', ']', ';' => return false;
		_ => return true;
	}
}

def skipWhitespaceAndComments(tr: TextReader) {
	var pos = tr.pos, line = tr.line, column = tr.column;
	var data = tr.data, max = tr.limit;
	var comment = false;
	while (pos < max) {
		var ch = data[pos];
		match (ch) {
			';' => {
				comment = true;
				column++;
			}
			' ' => column++;
			'\t' => column = tr.nextTabStop(column);
			'\n' => {
				tr.lineEnds.put(pos);
				column = 1;
				line++;
				comment = false;
			}
			_ => if (!comment) break; // not whitespace
		}
		pos++;
	}
	// reached the end or a non-whitespace byte
	tr.at(pos, line, column);
}


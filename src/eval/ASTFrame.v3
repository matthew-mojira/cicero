class ASTFrame extends FrameObject {
	new(prev: FrameObject, code: CodeObject, args: Array<(string, Object)>) super(prev, code, args) {
		if (args != null) {
			for (arg in args) {
				locals[arg.0] = arg.1;
			}
		}
	}
	
	def var locals: HashMap<string, Object> = Strings.newMap();
	
	def eval() {
		def v = evalAST(code.ast);
		if (!isExn())
			result = Result.OK(v);			
	}

	def evalCode(code: CodeObject) -> Object {
		def v = evalAST(code.ast);
		if (!isExn())
			result = Result.OK(v);			
		return v;
	}

	private def evalAST(ast: AST) -> Object {
		loc = ast.loc;
		var value: Object;

		match (ast.data) {
			Lit(val) => value = val;
			VarGet(id, mode) => match (mode.data) {
				Local => {
					if (locals.has(id))
						value = locals[id];
					else {
						throw(Strings.format1("unbound local: %s", id));
						return value;
					}
				}
				Global => {
					if (globals.has(id))
						value = globals[id];
					else {
						throw(Strings.format1("unbound global: %s", id));
						return value;
					}
				}
			}
			VarSet(id, mode, expr) => {
				def v = evalAST(expr);
				if (isExn()) return value;
				match (mode.data) {
					Local  => locals[id] = v;
					Global => globals[id] = v;
				}
				value = v;
			}
			Apply(tgt, args) => {
				def tgtVal = evalAST(tgt);
				if (isExn()) return value;
				assertType(ClassObjects.classFunc, tgtVal);
				if (isExn()) return value;

				// function code
				def fv = FuncObject.!(tgtVal);
				def params = fv.params, code = fv.code;

				// evaluate argument values
				var argv: Array<(string, Object)>;

				if (fv.instanceOf(ClassObjects.classMethod)) {
					argv = Array.new(args.length + 1);
					for (i < args.length) {
						def arg = evalAST(args[i]);
						if (isExn()) return value;
						if (i < params.length) // avoid out of bounds but don't raise exception
							argv[i + 1] = (params[i], arg);
					}
					argv[0] = ("self", MethodObject.!(fv).obj);
				} else {
					argv = Array.new(args.length);
					for (i < args.length) {
						def arg = evalAST(args[i]);
						if (isExn()) return value;
						if (i < params.length) // avoid out of bounds but don't raise exception
							argv[i] = (params[i], arg);
					}
				}

				// arity check
				assertArity(params.length, args);
				if (isExn()) return value;

				// create new frame (and evaluate)
				def frame = newFrame(code, argv);
				frame.eval();
				if (frame.isExn()) {
					rethrow(frame.getExn());
					return value;
				}
				value = frame.getValue();
			}
			If(exprC, exprT, exprF) => {
				def cond = evalAST(exprC);
				if (isExn()) return value;

				if (cond.isTrue()) {
					def v = evalAST(exprT);
					if (isExn()) return value;
					value = v;
				} else {
					def v = evalAST(exprF);
					if (isExn()) return value;
					value = v;
				}
			}
			Raise(expr) => {
				def v = evalAST(expr);
				if (isExn()) return value;

				// Raise a string for the message
				assertType(ClassObjects.classStr, v);
				if (isExn()) return value;

				throw(StrObject.!(v).str);
			}
			Catch(try, exnvar, b, catch) => {
				def v = evalAST(try);
				if (!isExn()) {
					value = v;
				} else {
					// catch exception
					def val = getExn();
					resetExn();
					match (b.data) { // bind exception to variable
						Local =>  locals[exnvar]  = val;
						Global => globals[exnvar] = val;
					}
					def e = evalAST(catch);
					if (isExn()) return value;
					value = e;
				}
			}
			Func(id, params, code) => {
				// future work: capturing free variables
				value = FuncObjects.newFO(id, params, code);
			}
			Class(id, superclass, init, fields, methods) => {
				var i: CodeObject = if(init.isJust(), init.fromJust(), null);
				var s: ClassObject;
				match (superclass) {
					Just(e) => {
						var v = evalAST(e);
						if (isExn()) return value;
						
						assertType(ClassObjects.classClass, v);
						if (isExn()) return value;
						
						s = ClassObject.!(v);
					}
					Nothing => s = ClassObjects.classBase;
				}
				def f: Array<(string, CodeObject)> = fields;
				def m: Array<FuncObject> = Arrays.map(methods, funcToFunc);
				value = ClassObject.new(id, s, i, f, m);
			}
			Cond(cases) => {
				var sat = false;
				for (c in cases) {
					// case
					def cond = c.0, expr = c.1;

					// check cond
					def t = evalAST(cond);
					if (isExn()) return value;
					if (t.isTrue()) {
						def v = evalAST(expr);
						if (isExn()) return value;
						value = v;

						sat = true;
						break;
					}
				}

				if (!sat) {
					throw("cond error: no true branch");
				}
			}
			While(cond, body) => {
				while (true) {
					def v = evalAST(cond);
					if (isExn()) return value;

					if (!v.isTrue()) {
						value = v;
						break;
					}

					evalAST(body);
					if (isExn()) return value;
				}
			}
			Begin(exprs) => {
				var last: Object;
				for (expr in exprs) {
					def v = evalAST(expr);
					if (isExn()) return value;

					last = v;
				}
				value = last;
			}
			GetField(field, expr) => {
				var obj = evalAST(expr);
				if (isExn()) return value;

				def v = obj.getField(field);
				if (v == null) {
					throw1("unknown field: %s", field);
					return value;
				} else {
					value = v;
				}
			}
			SetField(field, expr, newCode) => {
				var obj = evalAST(expr);
				if (isExn()) return value;

				var val = evalAST(newCode);
				if (isExn()) return value;

				if (obj.setField(field, val)) {
					value = val;
				} else {
					throw1("unknown field: %s", field);
					return value;
				}
			}
			New(expr) => {
				var cls = evalAST(expr);
				if (isExn()) return value;

				assertType(ClassObjects.classClass, cls);
				if (isExn()) return value;

				def clsObj = ClassObject.!(cls);
				def obj = Objects.newObject(clsObj);

				def classes: Vector<ClassObject> = Vector.new();
				for (cls = ClassObject.!(cls); cls != null; cls = cls.superclass)
					classes.put(cls);
			
				// initialization order is from base class downwards, which
				// may involve reinitializing some fields
				for (cls in classes.reverse().extract()) {
					// initialize fields
					for (field in cls.classFields) {
						def name = field.0, expr = field.1;

						// XXX hackfix
						if (expr == null) continue;
						// create new frames here!
						def frame = newFrame(expr, []);
						frame.eval();
						if (frame.isExn()) {
							rethrow(frame.getExn());
							return value;
						}
						obj.setField(name, frame.getValue());
					}
					// call initializer
					if (cls.init != null) {
						def args = [("self", obj)];
						def code = cls.init;

						// create new frames here!
						def frame = newFrame(code, args);
						frame.eval();
						if (frame.isExn()) {
							rethrow(frame.getExn());
							return value;
						}
					} 
				}
				value = obj;
			}
			List(exprs) => {
				def vals: Vector<Object> = Vector.new();
				for (expr in exprs) {
					def v = evalAST(expr);
					if (isExn()) return value;

					vals.put(v);
				}
				
				def obj = ListObject.new();
				obj.list.puta(vals.extract());

				value = obj;
			}
		}

		return value;
	}
}

def funcToFunc(f: ASTData.Func) -> FuncObject {
	return FuncObjects.newFO(f.id, f.params, f.body);
}

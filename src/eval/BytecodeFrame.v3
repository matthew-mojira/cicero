class BytecodeFrame extends FrameObject {
	new(prev: FrameObject, code: CodeObject, args: Array<(string, Object)>, nonlocalArgs: Array<(string, Object)>) super(prev, code, args) {
		if (code != null) {
			def bytecode = Code.Bytecode.!(code.code).bytecode;
			locals = Array.new(bytecode.locals.length);
			for (i < args.length) {
				locals[i] = args[i].1;
			}
			// XXX some slow unification here, which might lead to some nonlocals not being used from the args?
			nonlocals = Array.new(bytecode.nonlocals.length);
			for (i < nonlocals.length) {
				def id = bytecode.nonlocals[i];
				// search for id in nonlocal args
				var found: bool;
				for (p in nonlocalArgs) {
					if (Strings.equal(id, p.0)) {
						nonlocals[i] = p.1;
						found = true;
						break;
					}
				}
				if (!found) {
					// might this ever happen?
					System.error("eval error", "unable to unify nonlocal arguments");
				}
			}
		} else {
			locals = Array.new(0);
			nonlocals = Array.new(0);
		}
	}

	def var locals: Array<Object>;
	def var nonlocals: Array<Object>;

	def stack: ArrayStack<Object> = ArrayStack.new();
	/* This is a handler stack which stores structure about exceptions:
	 *   (a, b)
	 *   where
	 *     a = absolute pc of handler
	 *     b = absolute size of stack (i.e. pop other things until you restore stack state)
	 */
	def handlers: ArrayStack<(int, int)> = ArrayStack.new();

	def eval() {
		def v = evalBytecode(Code.Bytecode.!(code.code).bytecode);
		if (!isExn())
			result = Result.OK(v);
	}

	def evalCode(code: CodeObject) -> Object {
		stack.clear();
		def v = evalBytecode(Code.Bytecode.!(code.code).bytecode);
		if (!isExn())
			result = Result.OK(v);
		return v;
	}

	/* BYTECODE EVALUATOR */
	def evalBytecode(b: Bytecode) -> Object {
		def code       = b.instrs;
		def strings    = b.stringPool;
		def classholes = b.classPool;
		def funcholes  = b.funcPool;
		def constants  = b.constPool;
		def source     = b.sourceMap;
		
		if (CiceroOptions.traceBytecodeEvaluation) {
			System.puts("Evaluating bytecode:\n");
			System.puts(Strings.format1("Number of locals: %d\n", locals.length));
			b.inspect();
			System.puts("==\n");
		}

		var pc = 0;
		while (pc < code.length || isExn()) {
			if (CiceroOptions.sanityChecks)
				if ((pc & 0b11) != 0) System.error("eval error", Strings.format1("unaligned pc access: %d", pc));

			// if frame is in an exceptional state, try to handle it!
			// Should this go after the handlers?
 			if (isExn()) {
 				if (handlers.empty()) {
 					if (CiceroOptions.traceBytecodeEvaluation) System.puts("returned with exception\n");
 					return null;
 				}
 				def p = handlers.pop();
 				pc = p.0;
 				while (stack.top != p.1)
 					stack.pop();
 				// push error value
 				stack.push(getExn());
 				resetExn();
 			}

			// Fetch
			def bytecode = Ref<Instruction>.at(code, pc);
			loc = source[pc >> 2];

			/* Inline caches */
			var cache: Pair<ClassObject, int>;
  			if (CiceroOptions.enableIC) cache = b.cache[pc >> 2];
 
 			def opcode = bytecode.opcode;
			def operand  = bytecode.operand;

 			if (CiceroOptions.profileBytecode) {
 				Profiling.bytecodeMap[opcode.tag] += 1;
 			}

  			if (CiceroOptions.traceBytecodeEvaluation) {
  				System.puts(Strings.format3("  +%d: %s %d\n", pc, opcode.name, bytecode.operand));
  				System.puts("    locals:\n");
  				for (i < locals.length) {
  					if (locals[i] == null) {
  						System.puts(Strings.format1("    %d: NULL\n", i));
  					} else {
  						System.puts(Strings.format2("    %d: %s\n", i, locals[i].display()));
  					}
  				}
  				System.puts("    stack:\n");
  				for (i < stack.top) {
  					System.puts("    ");
  					System.puts(stack.elems[i].display());
  					System.ln();
  				}
  				System.puts("    exn loc stack:\n");
  				for (i < handlers.top) {
  					System.puts("    ");
  					System.puts(Strings.format2("=> %d (%d)", handlers.elems[i].0, handlers.elems[i].1));
  					System.ln();
  				}
  				System.puts("--\n");
  			}
 

			pc += 4;
			match (opcode) {
				NOP => ;
				LOAD_CONST => {
					stack.push(constants[operand]);
				}
				LOAD_GLOBAL => {
					def id = strings[operand];
					if (globals.has(id)) {
						stack.push(globals[id]);
					} else {
						throw(Exceptions.unboundGlobal(id));
					}
				}
				LOAD_LOCAL => {
					def local = locals[operand];
					if (local == null)
						throw(Exceptions.unboundLocal(b.locals[operand]));
					else
						stack.push(local);
				}
				LOAD_NONLOCAL => {
					def nonlocal = nonlocals[operand];
					if (CiceroOptions.sanityChecks) {
						if (nonlocal == null) {
							System.error("eval error", "nonlocal null");
						}
					}
					stack.push(nonlocal);
				}
				STORE_GLOBAL => {
					def id = strings[operand];
					def top = stack.pop();
					globals[id] = top;
				}
				STORE_LOCAL => {
					def top = stack.pop();
					locals[operand] = top;
				}
				JUMP => {
					pc += i24.view(operand);
				}
				JUMP_IF_FALSE => {
					def top = stack.pop();
					if (!top.isTrue()) pc += i24.view(operand);
				}
				JUMP_IF_TRUE_PEEK => {
					def top = stack.peek();
					if (!top.isTrue()) {
						stack.pop();
					} else {
						pc += i24.view(operand);
					}
				}
				JUMP_IF_FALSE_PEEK => {
					def top = stack.peek();
					if (top.isTrue()) {
						stack.pop();
					} else {
						pc += i24.view(operand);
					}
				}
				RAISE => {
					def top = stack.pop();
					assertType(ClassObjects.classStr, top);
					if (isExn()) continue;

					throw(StrObject.!(top).str);
				}
				ASSERT_FUNC => {
					def top = stack.peek();
					assertType(ClassObjects.classFunc, top);
				}
				CALL => {
					var args: Vector<Object> = Vector.new();
					for (i < operand) {
						args.put(stack.pop());
					}
					args.reverse(); // XXX reverse can be expensive, should do arithmetic on index instead

					def top = stack.pop();
					// function code
					def fv = FuncObject.!(top); // this cast succeeds because of ASSERT_FUNC
					def params = fv.params, code = fv.code;

					// evaluate argument values
					var argv: Array<(string, Object)>;

					if (fv.instanceOf(ClassObjects.classMethod)) {
						argv = Array.new(args.length + 1);
						for (i < args.length) {
							def arg = args[i];
							if (i < params.length) // avoid out of bounds but don't raise exception
								argv[i + 1] = (params[i], arg);
						}
						argv[0] = ("self", MethodObject.!(fv).obj);
					} else {
						argv = Array.new(args.length);
						for (i < args.length) {
							def arg = args[i];
							if (i < params.length) // avoid out of bounds but don't raise exception
								argv[i] = (params[i], arg);
						}
					}

					// arity check
					assertArity(params.length, args.extract()); // XXX extract
					if (isExn()) continue;

					// create new frame (and evaluate)
					def frame = newFrame(fv.id, code, argv, fv.nonlocals);
					frame.eval();
					if (frame.isExn()) {
						rethrow(frame.getExn());
						continue;
					}
					stack.push(frame.getValue());
				}
				TRY => {
					handlers.push((pc + operand, stack.top));
				}
				CATCH => {
					handlers.pop();
				}
				// stack manipulation
				POP => {
					for (i < operand) stack.pop();
				}
				DUPE => {
					// special path, operand = 0
					stack.push(stack.elems[stack.top - operand - 1]);
				}
				SWAP => {
					def top = stack.peek();
					def val = stack.elems[stack.top - operand - 1];
					stack.elems[stack.top - 1] = val;
					stack.elems[stack.top - operand - 1] = top;
				}
				// objects
				CREATE_CLASS => {
					def superclass = stack.pop();
					assertType(ClassObjects.classClass, superclass);
					if (isExn()) continue;

					def classhole = classholes[operand];
					stack.push(classhole(ClassObject.!(superclass)));
				}
				CREATE_OBJECT => {
					def top = stack.pop();
					assertType(ClassObjects.classClass, top);
					if (isExn()) continue;

					// duplicated code
					def clsObj = ClassObject.!(top);
					def obj = Objects.newObject(clsObj);

					def classes: Vector<ClassObject> = Vector.new();
					for (cls = clsObj; cls != null; cls = cls.superclass)
						classes.put(cls);
				
					// initialization order is from base class downwards, which
					// may involve reinitializing some fields
					for (cls in classes.reverse().extract()) {
						// initialize fields
						for (field in cls.classFields) {
							def name = field.0, expr = field.1;

							// XXX hackfix
							if (expr == null) continue;
							// create new frames here!
							def frame = newFrame(Strings.format2("%s.%s", cls.name, name), expr, [], []);
							frame.eval();
							if (frame.isExn()) {
								rethrow(frame.getExn());
								continue;
							}
							obj.setField(name, frame.getValue());
						}
						// call initializer
						if (cls.init != null) {
							def args = [("self", obj)];
							def code = cls.init;

							// create new frames here!
							def frame = newFrame(Strings.format1("%s.init", cls.name), code, args, []);
							frame.eval();
							if (frame.isExn()) {
								rethrow(frame.getExn());
								continue;
							}
						} 
					}
					stack.push(obj);
				}
				LOAD_FIELD => {
					def obj = stack.pop();
					def field = strings[operand];

					if (CiceroOptions.enableIC) {
						def cls = obj.getClass();
						/* Inline cache */
						if (cache.fst == cls) {
							stack.push(obj.getFieldByIndex(cache.snd));
						} else {
							def v = obj.getField(field);
							if (v == null) {
								throw(Exceptions.missingField(obj, field));
							} else {
								cache.fst = cls;
								cache.snd = obj.getIndex(field);
								stack.push(v);
							}
						}
					} else {
						def v = obj.getField(field);
						if (v == null) {
							throw(Exceptions.missingField(obj, field));
						} else {
							stack.push(v);
						}
					}
				}
				STORE_FIELD => {
					def val = stack.pop();
					def obj = stack.pop();
					def field = strings[operand];

					if (!obj.setField(field, val)) {
						throw(Exceptions.missingField(obj, field));
					}
				}
				CREATE_LIST => {
					def values: Vector<Object> = Vector.new();
					for (i < operand) {
						values.put(stack.pop());
					}
					values.reverse();

					def obj = ListObject.new();
					obj.list.puta(values.extract());

					stack.push(obj);
				}
				CREATE_FUNC => {
					def funchole = funcholes[operand];

					def nonlocals: Array<(string, Object)> = Array.new(funchole.nonlocals.length);

					def fn = FuncObjects.newFO(funchole.id, funchole.params, nonlocals, funchole.body);
					for (i = funchole.nonlocals.length - 1; i >= 0; i--) {
						// if the nonlocal is the function itself (for recursion) then do not
						// get it from the stack. you already have it!
						if (Strings.equal(funchole.nonlocals[i], funchole.id)) {
							nonlocals[i] = (funchole.id, fn);
						} else {
							nonlocals[i] = (funchole.nonlocals[i], stack.pop());
						}
						// this if prevents certain NullPointerException
  						//if (nonlocals[i] == (null, null))
  						//	System.error("null check", "null");
					}

					stack.push(fn);
				}
				//_ => System.error("eval error", "unsupported opcode");
			}

		}

		if (stack.empty()) System.error("eval error", "stack is empty");
		if (CiceroOptions.traceBytecodeEvaluation) System.puts("RETURN\n");
		return stack.peek();
	}
}

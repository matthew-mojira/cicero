class WasmFrame extends FrameObject {
	new(prev: FrameObject, code: CodeObject, args: Array<(string, Object)>, nonlocalArgs: Array<(string, Object)>) super(prev, code, args) {
	}

	def var locals: Array<Object>;
	def var nonlocals: Array<Object>;

	def eval() {
		def f = Code.Wasm.!(code.code).wasm;
		match (f) {
			Func1(f) => {
				System.puts("making call into wasm code\n");
				result = Result.OK(f(this));
				System.puts("result is ok\n");
			}
			Func2(f) => {
				System.puts("making call into wasm code 2\n");
				result = Result.OK(f(this, args[0].1));
				System.puts("result is ok\n");
			}
			_ => {
				System.puts("unimplemented number of arguments\n");
				System.error("unimplemented", "WasmFrame.eval: FuncN (N != 1)");
			}
		}
	}

	def evalCode(code: CodeObject) -> Object {
		def f = Code.Wasm.!(code.code).wasm;
		match (f) {
			Func1(f) => {
				def value = f(this);
				result = Result.OK(value);
				return value;
			}
			_ => System.error("unimplemented", "WasmFrame.eval: FuncN (N != 1)");
		}
		return null;
	}

	// TODO handle error condition
	def getGlobal(id: string) -> Object {
		if (globals.has(id))
			return globals[id];
		System.puts(Strings.format1("cicero exception: global %s not found\n", id));
		System.error("cicero exception", Strings.format1("global %s not found", id));
		return null;
	}

	def setGlobal(id: string, obj: Object) {
		globals[id] = obj;
	}
}

class BoolObject(val: bool) extends Object {
	private new () super(BoolObjects.classBool) {}
	
	def display() -> string { return if(val, "true", "false"); }
	def isTrue()  -> bool   { return val; }

	def b_not() -> (Object, bool) { 
		return (BoolObjects.getBoolObject(!val), false);
	}
	def b_and(that: BoolObject) -> (Object, bool) {
		return (BoolObjects.getBoolObject(this.val && that.val), false);
	}
	def b_or(that: BoolObject) -> (Object, bool) {
		return (BoolObjects.getBoolObject(this.val || that.val), false);
	}
}

def b: Array<ClassObject> = Array.new(1);

component BoolObjects {
	def classBool: ClassObject = 
		ClassObject.new("bool", 
				Objects.classBase, 
				CodeObjects.virgilFail, 
				[], 
				[FuncObjects.fromVirgilMethod0("not",    BoolObject.b_not),
				 FuncObjects.fromVirgilMethod1("and", b, BoolObject.b_and),
				 FuncObjects.fromVirgilMethod1("or",  b, BoolObject.b_or)
				]);

	/* canonical instances of bool values */
	def trueObject  = BoolObject.new(true);
	def falseObject = BoolObject.new(false);

	def getBoolObject(b: bool) -> BoolObject {
		return if(b, trueObject, falseObject);
	}
}

def stuff = b[0] = BoolObjects.classBool;

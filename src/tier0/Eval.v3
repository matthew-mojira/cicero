class Eval {
	private def env: HashMap<string, Value> = Strings.newMap();

	new() {
		// add builtins to environment
		for (builtin in Builtin.set.all) {
			env[builtin.id] = Value.Func(builtin.argc, builtin.func);
		}
	}

	def eval(expr: Expr) -> Value {
		match (expr.data) {
			Lit(val) => return val;
			Id(id) => return env[id];
			Apply(tgt, args) => {
				def func = Value.Func.!(eval(tgt));
				def argv = Arrays.map(args, eval);
				Assert.assertArity(argv, func.argc);
				return func.func(argv);
			}
			If(exprC, exprT, exprF) => {
				def cond = eval(exprC);
				return eval(if(cond.isTrue(), exprT, exprF));
			}
		}
	}
}

==
(func (f) {
  (set x 1)
  (func (g) x)
  g
})
(f)
((f))
--
=> <func 'f'>
=> <func 'g'>
=> 1
--
(func (f) {
  (set x 1)
  (func (g) x)
  (set x 2)
  g
})
(f)
((f))
--
=> <func 'f'>
=> <func 'g'>
=> 1
--
(func (f x) (lambda (y) (+ x y)))
((f 1) 2)
--
=> <func 'f'>
=> 3
--
(func (f x) (lambda (x) (+ x 1)))
((f 10) 1)
--
=> <func 'f'>
=> 2
--
(func (sub x y)
  (lambda () (- x y)))
(sub 1 2)
((sub 1 2))
--
=> <func 'sub'>
=> <func 'lambda'>
=> -1
--
(func (main) {
   (func (foo x) (if (= x 0) x (foo 0)))
   (foo 1)
})
(main)
--
=> <func 'main'>
=> 0
--
